{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FF's Notebooks","text":""},{"location":"#some-interesting-cs-courses","title":"Some interesting CS Courses","text":"<ul> <li> <p>x86 ASM</p> <ul> <li>Taught by BHH, a hacker in my dream.</li> <li>One of the most meaningful classes I've taken, where I learn from hardware implementation in computer (My fundation on ICS) to basic x86 ASM compiling and programming. </li> </ul> </li> <li> <p>Digit Logic Design</p> <ul> <li>Taught by CM, one of the best teacher I've met.</li> <li>Concretely learn the basic digit design, and some basic hardware programming (Verilog)</li> </ul> </li> <li> <p>CS231n</p> <ul> <li>My work in learning CS231n</li> <li>It's truly the best course for me to learn CV<ul> <li>Give me a preliminary understanding of CV</li> <li>Introduce many popular and typical Algorithms, FC, CNN, RNN, Transformer, GAN, Self-Supervised \u2026\u2026</li> <li>Leads me to try to read some famous papers by myself</li> <li>Help me gain a deeper insight into the model with moderately difficult project which can be auto-checked </li> </ul> </li> </ul> </li> <li> <p>ADS</p> <ul> <li>Taught by CH, my senior and a intelligent researcher </li> <li>Learn some advanced data structures, algorithm, and some advanced analysis</li> <li>Despite of my experience in Informatics Olympiad, I still feel it challenging</li> </ul> </li> <li> <p>OOP</p> <ul> <li>Taught by WK, a famous teacher in ZJU</li> <li>Learn some basic OOP concepts and some advanced design patterns using C++</li> </ul> </li> <li> <p>Information theory</p> <ul> <li>Taught by YGD, a professor in ZJU</li> <li>Learn some basic information theory, which is significant in machine learning theory especially in proof, so I think it's necessary to take this course carefully and take notes</li> </ul> </li> </ul>"},{"location":"#some-useful-tools-in-learning","title":"Some useful tools in learning","text":"<ul> <li> <p>Git</p> <ul> <li>Undoubtedly one of the most useful tools as distributed version control system</li> <li>Workspace history recorded</li> <li>Remote workspace storage &amp; cooperation</li> </ul> </li> <li> <p>Makefile &amp; CMake</p> <ul> <li>Makefile is a tool to compile and link multiple source codes</li> <li>CMake is a efficient tool to help generate Makefile (Not written yet)</li> </ul> </li> </ul>"},{"location":"ADS/","title":"ADS","text":"<p>\u7b2c\u4e00\u8282\u8bfe\u5c31\u8bb2\u4e86AVL+Splay+\u644a\u8fd8\u5206\u6790\uff0c\u8ba9\u4fe1\u606f\u7ade\u8d5b\u9000\u5f79\u9009\u624b\u7684\u6211\u5df2\u7ecf\u6c57\u6d41\u6d43\u80cc\u2026\u2026</p>"},{"location":"ADS/#data-structrure","title":"Data Structrure","text":""},{"location":"ADS/#avl","title":"AVL","text":"<ul> <li> <p>\u5b9a\u4e49\uff1a\u4efb\u610f\u8282\u70b9\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u5927\u4e8e1</p> </li> <li> <p>\u590d\u6742\u5ea6\u5206\u6790\uff1a</p> <ul> <li> <p>\u5bf9\u4e8e\u5e38\u89c1\u64cd\u4f5c\uff08\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u8be2\uff09\\(O(h)\\)</p> </li> <li> <p>\u7531\u5b9a\u4e49\uff0c\u8ba9\u9ad8\u5ea6\u6700\u5927\uff0c\u6709\\(N_{h} = N_{h-1} + N_{h-2} + 1\\)</p> </li> <li> <p>\u5316\u7b80\uff0c\u5f97\u5230\\((N_{h} + 1)= (N_{h-1} + 1) + (N_{h-2} + 1)\\)</p> </li> <li> <p>\u7531\u6590\u6ce2\u90a3\u5951\u6570\u5217\u76f8\u5173\u77e5\u8bc6\uff0c\u5f97\\(N_h = F_{h+3} - 1\\) (\u7a7a\u6811\u4e3a-1)</p> </li> <li> <p>\u7531\u6b64\u53ef\u5f97\uff0c\\(h = O(\\log N)\\)</p> </li> </ul> </li> <li> <p>\u7ef4\u62a4\uff08Rotation\uff09</p> <ul> <li> <p>\u7531\u5b9a\u4e49\u7684\u4e25\u683c\u6027\uff0c\u53ef\u77e5\u53ea\u8981\u5904\u7406\u6700\u5c0f\u4e0d\u5e73\u8861\u5b50\u6811\u5373\u53ef</p> </li> <li> <p>\u4e2a\u4eba\u611f\u89c9\u65cb\u8f6c\u53cd\u800c\u4e0d\u591f\u76f4\u89c2\uff0c\u66f4\u50cf\u662f\u5c06\u4e0b\u9762\u7684\u8282\u70b9\u5f80\u4e0a\u9762\u201c\u62ce\u201d\u8d77\u6765\uff0c\u4ece\u800c\u8be5\u8282\u70b9\uff08\u5b50\u6811\u6839\u8282\u70b9\uff09\u7684\u5404\u4e2a\u513f\u5b50\u5411\u4e24\u8fb9\u201c\u6389\u4e0b\u53bb\u201d\uff0c\u6574\u68f5\u5b50\u6811\u4e5f\u5c31\u50cf\u662f\u88ab\u5c55\u5e73\u4e86\u4e00\u6837\u66f4\u52a0\u5e73\u8861\u4e86</p> </li> <li> <p>LL / RR Rotation</p> <ul> <li> <p>\u5355\u94fe\u503e\u659c\uff0c\u5c06\u4e2d\u95f4\u8282\u70b9\u62ce\u8d77\u6765\uff08\u5c06\u4e2d\u95f4\u8282\u70b9\u5411\u4e0a\u65cb\u8f6c\uff09\u5c31\u597d</p> </li> <li> <p></p> </li> </ul> </li> <li> <p>LR / RL Rotation</p> <ul> <li> <p>\u5f2f\u66f2\u94fe\uff0c\u5c06\u6743\u503c\u4e3a\u4e2d\u95f4\u503c\uff08\u6700\u4e0b\u7aef\u513f\u5b50\uff09\u7684\u8282\u70b9\u62ce\u8d77\u6765\uff0c\u8be5\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u5206\u522b\u5411\u4e24\u8fb9\u6389\u4e0b\u53bb</p> </li> <li> <p>\u8fd8\u6709\u4e00\u79cd\u7406\u89e3\uff0c\u5c06\u8fd9\u79cd\u60c5\u51b5\u7406\u89e3\u4e3a\u6700\u4e0b\u7aef\u513f\u5b50\u5411\u4e0arotation\u4e24\u6b21 </p> </li> <li> <p></p> </li> </ul> </li> </ul> </li> <li> <p>Code</p> </li> </ul> <pre><code>struct Node{\n    int data, H;\n    Node *Ls, *Rs;\n    Node(int data): data(data), H(0), Ls(NULL), Rs(NULL){}\n    int Update(){\n        int HL = -1, HR = -1;\n        if(Ls != NULL) HL = Ls-&gt;H;\n        if(Rs != NULL) HR = Rs-&gt;H;\n        H = max(HL, HR) + 1;\n        return abs(HL - HR);\n    }\n};\nstruct AVL{\n    Node *Rot;\n\n    //Structure\n    void Clear(Node *x){\n        if(x-&gt;Ls) Clear(x-&gt;Ls);\n        if(x-&gt;Rs) Clear(x-&gt;Rs);\n        delete x;\n    }\n    Node *Insert(Node *p, int x){\n        if(p == NULL) return new Node(x);\n        if(x &lt; p-&gt;data) p-&gt;Ls = Insert(p-&gt;Ls, x);else p-&gt;Rs = Insert(p-&gt;Rs, x);\n\n        if(p-&gt;Update() &gt; 1) return Balance(p,x);\n        return p;\n    }\n    void Rotate(Node **X, Node **Y, bool p){\n        // p = 0 -&gt; Left, p = 1 -&gt; Right\n        // rotate X to Y\n        if(!p){\n            (*Y)-&gt;Ls = (*X)-&gt;Rs;\n            (*X)-&gt;Rs = *Y;\n        }else{\n            (*Y)-&gt;Rs = (*X)-&gt;Ls;\n            (*X)-&gt;Ls = *Y;\n        }\n        (*Y)-&gt;Update(), (*X)-&gt;Update();\n    }\n    Node *Balance(Node *Trouble, int x){\n        Node *G = Trouble, *F, *X;\n        bool p, q;\n        if(x &lt; G-&gt;data) F = G-&gt;Ls, p = 0;else F = G-&gt;Rs, p = 1;\n        if(x &lt; F-&gt;data) X = F-&gt;Ls, q = 0;else X = F-&gt;Rs, q = 1;\n        if(p ^ q) Rotate(&amp;X, &amp;F, q), Rotate(&amp;X, &amp;G, p);\n            else Rotate(&amp;F, &amp;G, p), X = F;\n        return X;\n    }\n\n    void Print(Node *x){\n        printf(\"%d \",x-&gt;data);\n        if(x-&gt;Ls) Print(x-&gt;Ls);\n        if(x-&gt;Rs) Print(x-&gt;Rs);\n    }\n\n    // User\n    void Clear(){if(Rot) Clear(Rot);Rot = NULL;}\n    void PrintRoot(){printf(\"%d\\n\",Rot-&gt;data);}\n    void Insert(int x){Rot = Insert(Rot, x);}\n\n}Tree;\n</code></pre>"},{"location":"ADS/#splay","title":"Splay","text":"<ul> <li> <p>\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u5c06\u67e5\u8be2\u7684\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u4ece\u800c\u5728\u8fc7\u7a0b\u4e2d\u5c06\u6811\u5c55\u5e73</p> </li> <li> <p>\u7531\u4e8e\u52a8\u6001\u81ea\u9002\u5e94\u7b49\u7279\u6027\uff0c\u5b9e\u9645\u4e0asplay\u6811\u975e\u5e38\u5f3a\u5927</p> </li> <li> <p>\u5747\u644a\u590d\u6742\u5ea6\uff1a\\(O(\\log N)\\)</p> </li> <li> <p>\u7ef4\u62a4\uff08ZigZag\uff09</p> <ul> <li> <p>\u76ee\u7684\u4e0eAVL\u7565\u6709\u4e0d\u540c\uff0cAVL\u5b8c\u5168\u662f\u4e3a\u4e86\u4fdd\u6301\u6811\u7684\u5e73\u8861\uff0c\u800cSplay\u662f\u4e3a\u4e86\u5c06\u67e5\u8be2\u7684\u8282\u70b9\u5411\u4e0a\u79fb\u52a8\u7684\u540c\u65f6\u5c3d\u91cf\u5c55\u5e73\u6811\uff08\u4e00\u822c\u4e3a\u6bcf\u6b21\u8003\u8651\u5f53\u524d\u8282\u70b9\u3001\u7236\u8282\u70b9\u548c\u7956\u5148\u8282\u70b9\uff0c\u9009\u62e9\u6700\u5408\u9002\u7684\u65cb\u8f6c\u65b9\u6cd5\uff09</p> </li> <li> <p>Zig</p> <ul> <li> <p>\u5df2\u7ecf\u662f\u6839\u8282\u70b9\u7684\u513f\u5b50\uff0c\u76f4\u63a5\u5411\u4e0a\u65cb\u8f6c\u4e00\u6b21\u5373\u53ef</p> </li> <li> <p> </p> </li> </ul> </li> <li> <p>ZigZig</p> <ul> <li> <p>\u503e\u659c\u94fe\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9\u5411\u4e0a\u65cb\u8f6c\u4e00\u6b21\uff0c\u518d\u5c06\u5f53\u524d\u8282\u70b9\u5411\u4e0a\u65cb\u8f6c\u4e00\u6b21</p> </li> <li> <p>\u4e0d\u80fd\u76f4\u63a5\u5c06\u5f53\u524d\u8282\u70b9\u5411\u4e0a\u65cb\u8f6c\u4e24\u6b21\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u503e\u659c\u94fe\u6b6a\u5411\u53e6\u4e00\u8fb9</p> </li> <li> <p>\u4e5f\u53ef\u4ee5\u770b\u6210\u76f4\u63a5\u5c06\u5f53\u524d\u8282\u70b9\u5f80\u6700\u4e0a\u9762\u4e00\u63d0\uff0c\u5269\u4e0b\u7684\u513f\u5b50\u4eec\u201c\u7eb7\u7eb7\u201d\u5f80\u4e0b\u6389</p> </li> <li> <p></p> </li> </ul> </li> <li> <p>ZigZag </p> <ul> <li> <p>\u5f2f\u66f2\u94fe\uff0c\u76f4\u63a5\u5c06\u5f53\u524d\u8282\u70b9\u5411\u4e0a\u65cb\u8f6c\u4e24\u6b21</p> </li> <li> <p>\u4e5f\u53ef\u4ee5\u770b\u6210\u76f4\u63a5\u5c06\u5f53\u524d\u8282\u70b9\u5f80\u6700\u4e0a\u9762\u4e00\u63d0\uff0c\u4e24\u4e2a\u513f\u5b50\u88ab\u7236\u8282\u70b9\u548c\u7956\u5148\u8282\u70b9\u5747\u5206\uff0c\u4ece\u800c\u8d8b\u5411\u5e73\u8861</p> </li> <li> <p> </p> </li> </ul> </li> </ul> </li> <li> <p>Code (Not checked yet)</p> </li> </ul> <pre><code>struct Node{\n    Node *fa, *v[2];\n    int data;\n    Node (int x, Node *F, Node *Pivot):data(x),fa(F),v{Pivot, Pivot}{}\n};\ntypedef Node *Pt;\nPt NUL;// A trick to avoid NULL pointer\nstruct SplayTree{\n    Pt Rot;\n    void Print(Pt i){// Preorder\n        if(i == NUL) return;\n        cout &lt;&lt; i-&gt;data &lt;&lt; \" \";\n        Print(i-&gt;v[0]), Print(i-&gt;v[1]);\n    }\n    bool Is(Pt i){return (i-&gt;fa-&gt;v[1] == i);}// 0: left son, 1: right son\n    void Rotate(Pt i){ // Rotate i to its father\n        Pt F = i-&gt;fa, G = F-&gt;fa; bool p = Is(i), q = Is(F);\n        F-&gt;v[p] = i-&gt;v[p ^ 1], i-&gt;v[p^1]-&gt;fa = F;\n        F-&gt;fa = i, i-&gt;v[p^1] = F;\n        G-&gt;v[q] = i, i-&gt;fa = G;\n    }\n    void Splay(Pt i){// Splay i to the root\n        while(i-&gt;fa != NUL){\n            if(i-&gt;fa-&gt;fa != NUL) Rotate(Is(i) == Is(i-&gt;fa) ? i-&gt;fa : i), Rotate(i);\n                else Rotate(i);\n        }\n        Rot = i;\n    }\n    void Insert(Pt &amp;i, Pt F, int x){\n        if(i == NUL) return (void)(Splay(i = new Node(x, F, NUL)));\n        Insert(i-&gt;v[x &gt; i-&gt;data], i, x);\n    }\n\n    // User Interface\n    void Clear(){Rot = NUL = new Node(-1, NULL, NULL);}\n    void Print(){Print(Rot);cout &lt;&lt; endl;}\n    void Insert(int x){Insert(Rot, NUL, x);}\n    void Find(int x){\n        Pt i = Rot;\n        while(i != NUL &amp;&amp; i-&gt;data != x) i = i-&gt;v[x &gt; i-&gt;data];\n        if(i != NUL) Splay(i);\n    }\n    void Delete(int x){\n        Find(x);// Splay x to the root\n        if(Rot-&gt;v[0] == NUL) Rot = Rot-&gt;v[1], Rot-&gt;fa = NUL;\n        else{\n            Pt i = Rot-&gt;v[0], X = Rot;\n            while(i-&gt;v[1] != NUL) i = i-&gt;v[1];// Find the maximum in the left subtree\n            Splay(i);\n            i-&gt;v[1] = X-&gt;v[1], X-&gt;v[1]-&gt;fa = i;\n        }\n    }\n}Tree;\n</code></pre>"},{"location":"ADS/#algorithm","title":"Algorithm","text":""},{"location":"ADS/#amortized-analysis","title":"Amortized Analysis (\u644a\u8fd8\u5206\u6790)","text":"<ul> <li> <p>Aggregated Analysis (\u805a\u7c7b\u5206\u6790)</p> <ul> <li> <p>\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u82e5\u8be5\u64cd\u4f5c\u5e8f\u5217\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aT(N),\u5219\u8be5\u64cd\u4f5c\u5e8f\u5217\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u644a\u8fd8\u4ee3\u4ef7\uff09\u4e3a T(N) / N</p> </li> <li> <p>\u7b80\u5355\u7c97\u66b4\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u4e0d\u591f\u7cbe\u786e\uff0c\u56e0\u4e3a T(N) \u5e76\u4e0d\u4e00\u5b9a\u597d\u6c42 </p> </li> </ul> </li> <li> <p>Accounting Method (\u6838\u7b97\u6cd5)</p> <ul> <li> <p>\u4e3a\u6bcf\u4e2a\u64cd\u4f5c\u5206\u914d\u4e00\u4e2a\u989d\u5916\u644a\u8fd8\u4ee3\u4ef7\uff0c\u4ece\u800c\u4fbf\u4e8e\u4f30\u8ba1\u603b\u4ee3\u4ef7</p> </li> <li> <p>\u5e38\u89c1\u7406\u89e3\uff1a \u5c06\u989d\u5916\u5206\u914d\u7684\u4ee3\u4ef7\u89c6\u4e3a\u5b58\u94b1\uff0c\u4e4b\u540e\u7684\u4e00\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u53d6\u94b1\u6765\u89e3\u51b3\uff0c\u4ece\u800c\u4f7f\u5f97\u603b\u4ee3\u4ef7\u4e0d\u4f1a\u8d85\u8fc7\u9884\u671f</p> </li> <li> <p>\u4e2a\u4eba\u611f\u89c9\uff0c\u4e0d\u5982\u76f4\u63a5\u4ece\u5b9a\u4e49\u5f0f\u4e0a\u53bb\u7406\u89e3</p> <ul> <li> <p>\\(\\sum_{i=1}^{n}c_i + \\sum_{i=1}^{n}t_i \\leq \\sum_{i=1}^{n}a_i\\)</p> </li> <li> <p>\\(c_i\\) \u4e3a\u5b9e\u9645\u6bcf\u4e00\u6b65\u7684\u4ee3\u4ef7\uff0c\\(t_i\\) \u4e3a\u989d\u5916\u644a\u8fd8\u4ee3\u4ef7\uff0c\\(a_i\\) \u4e3a\u4f30\u8ba1\u7684\u644a\u8fd8\u4ee3\u4ef7</p> </li> <li> <p>\u56e0\u800c\u53ea\u8981\u8ba9\\(t_i \\geq 0\\), \u5c31\u80fd\u4fdd\u8bc1\u5206\u6790\u7684\u590d\u6742\u5ea6\u4e00\u5b9a\u662f\u4e0a\u754c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7c7b\u4f3c\u4e8e\u6570\u5217\u653e\u7f29\uff0c\u901a\u8fc7\u5408\u7406~~\uff08\u7384\u5b66\uff09~~\u7684\u5206\u914d\u6743\u503c\uff0c\u4f7f\u5f97\u603b\u548c\u4e0d\u4f1a\u8d85\u8fc7\u9884\u671f</p> </li> </ul> </li> </ul> </li> <li> <p>Potential Method\uff08\u52bf\u80fd\u6cd5\uff09</p> <ul> <li> <p>\u7ed9\u6bcf\u4e2a\u72b6\u6001\u5206\u914d\u4e00\u4e2a\u52bf\u80fd\uff0c\u5c06\u644a\u8fd8\u4ee3\u4ef7\u89c6\u4e3a\u52bf\u80fd\u7684\u53d8\u5316</p> <ul> <li> <p>\\(c_i\\) \u4e3a\u5b9e\u9645\u6bcf\u4e00\u6b65\u7684\u4ee3\u4ef7\uff0c\\(a_i\\) \u4e3a\u4f30\u8ba1\u7684\u644a\u8fd8\u4ee3\u4ef7\uff0c\\(\\Phi_i\\) \u4e3a\u52bf\u80fd</p> </li> <li> <p>\\(\\Phi_0 = 0\\)</p> </li> <li> <p>\\(c_i + \\Phi_i - \\Phi_{i-1} =a_i\\) </p> </li> <li> <p>\u4e24\u8fb9\u6c42\u548c\uff0c\u5f97\u5230 \\(\\sum_{i=1}^{n}c_i + \\Phi_{n} = \\sum_{i=1}^{n}a_i\\)</p> </li> </ul> </li> <li> <p>\u4ece\u800c\u76f8\u5f53\u4e8e\u83b7\u5f97\u6bd4\u6838\u7b97\u6cd5\u66f4\u52a0\u5bbd\u677e\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u6bcf\u4e00\u6b65\u7684\u644a\u8fd8\u4ee3\u4ef7\u90fd\u4e3a\u6b63\uff0c\u53ea\u8981\u9009\u62e9\u4e00\u4e2a\u7384\u5b66\u7684\u52bf\u80fd\u51fd\u6570\uff08\u8003\u8651\u9898\u76ee\u7279\u6027\uff09\uff0c\u4fdd\u8bc1\u6700\u540e\u4e00\u4e2a\u72b6\u6001\u7684\u52bf\u80fd\u4e3a\u6b63\u5373\u53ef</p> </li> <li> <p>Splay Tree</p> <ul> <li> <p>\u9009\u62e9\u52bf\u80fd\u51fd\u6570 \\(\\Phi = \\sum_{i=1}^{n}log(size_i)\\), \u5373\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e4b\u548c</p> </li> <li> <p>\u5bf9\u4e09\u79cd\u65cb\u8f6c\u64cd\u4f5c\u8fdb\u884c\u5206\u522b\u5206\u6790\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u6b21\u65cb\u8f6c\u7684\u644a\u8fd8\u4ee3\u4ef7\u4e3a \\(O(logN)\\)</p> </li> <li> <p></p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"ASM/","title":"x86\u6c47\u7f16\u8bed\u8a00\u57fa\u7840","text":""},{"location":"ASM/#_1","title":"\u57fa\u672c\u89c4\u5219","text":"<ul> <li> <p>\u5bc4\u5b58\u5668\uff1a</p> </li> <li> <p>ax  bx cx dx\uff08\u8ba1\u7b97\u5e38\u7528\uff09</p> </li> <li>ds cs(\u6307\u4ee4\u548c\u6570\u636e\u6bb5\u5730\u5740)\uff0css(\u5806\u6808\u5730\u5740)\uff0ces\uff08\u6bb5\u5bc4\u5b58\u5668)     \u6bb5\u5bc4\u5b58\u5668\u4e0d\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u5e38\u6570\u6216\u8ba1\u7b97\uff0c\u53ea\u80fd\u7528\u5bc4\u5b58\u5668\u6216\u53d8\u91cf\u8d4b\u503c</li> <li>si  di  bx  bp sp (\u504f\u79fb\u5730\u5740\u5bc4\u5b58\u5668\uff0c\u5373\u53ef\u4ee5\u653e\u8fdb[ ]\u4e2d)     \uff08\u5176\u4e2dss:sp\u6307\u5411\u6808\u9876\uff0cbp\u4e5f\u5e38\u7528\u4e8e\u6808\u4e2d\u5143\u7d20\uff09</li> <li>ip \uff08\u6307\u4ee4\u6307\u9488\uff0c\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\uff09</li> <li>FL \uff0816\u4f4d\u8bb0\u5f55\u8fd0\u7b97\u72b6\u6001\uff09</li> <li>\u53cc\u76ee\u8fd0\u7b97\u4f4d\u5bbd\u76f8\u7b49\u4e14\u53ef\u786e\u5b9a\uff0c\u5e76\u4e14\u4e0d\u80fd\u540c\u65f6\u4e3a\u5185\u5b58\u5730\u5740   \u53d8\u91cf\u5f3a\u5236\u89c4\u5b9a\u4f4d\u5bbd\uff1a<code>byte/word/dword ptr</code></li> </ul> <p>\u5b9a\u4e49\u7684\u53d8\u91cf\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u5c5e\u4e8e\u53ef\u786e\u5b9a\u5bbd\u5ea6\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5 <code>mov a,0</code> - assume   \u672c\u8d28\u4e0a\u4e3a\u7701\u7565\u6bb5\u5730\u5740\u7684\u66ff\u6362</p> <p>(\u540c\u4e00\u4e2a\u6bb5\u4e0e\u591a\u4e2a\u6bb5\u5bc4\u5b58\u5668\u6709\u5173\u8054\u65f6:ds &gt; ss &gt; es &gt; cs)</p> <p>\u4f8b\u5982assume ds:data\u5373\u5c06data:\u81ea\u52a8\u66ff\u6362\u4e3ads:   \u6240\u4ee5\u4e00\u822c\u7a0b\u5e8f\u5f00\u5934\u6709</p> <pre><code>mov ax,data\nmov ds,ax\n</code></pre>"},{"location":"ASM/#_2","title":"\u6570\u636e\u5b58\u50a8","text":"<ul> <li>\u5185\u5b58\u4e2d\u5c0f\u7aef\u89c4\u5219\uff0c\u4f4e\u4f4d\u5728\u524d\uff0c\u9ad8\u4f4d\u5728\u540e</li> </ul> <p>\u5982    1234H  ---&gt;      34   12</p> <p>\u53ef\u7528\u4e0b\u9762\u4e24\u6bb5C\u8bed\u8a00\u4ee3\u7801\u9a8c\u8bc1</p> <pre><code>   unsigned short int a = 0x1234;\n   unsigned char *p;\n   p = (unsigned char *)&amp;a;\n   printf(\"%X %X\", p[0], p[1]);\n\n\n   unsigned char a[2]={0x12, 0x34};\n   unsigned short int *p;\n   p = (unsigned short int *)a;\n   printf(\"%X\", *p);\n</code></pre> <ul> <li>\u7b26\u53f7\u4e0d\u533a\u5206</li> </ul> <pre><code>a db 0FFh\n</code></pre> <p>\u5230\u5e95\u4ee3\u8868255\u8fd8\u662f-1,\u5728\u5b9a\u4e49\u65f6\u5e76\u4e0d\u786e\u5b9a</p> <p>\u4f46\u662f\u5728\u5f15\u7528\u53d8\u91cfa\u65f6\u53ef\u4ee5\u7528\u6307\u4ee4\u6765\u533a\u5206\u5b83\u662f\u975e\u7b26\u53f7\u8fd8\u662f\u6709\u7b26\u53f7</p> <p>\u4f8b\u5982 <code>imul  a</code>\u6307\u4ee4\u8868\u793a\u4e58\u4ee5  -1 \uff0c\u800c <code>mul a</code>\u6307\u4ee4\u5219\u8868\u793a\u4e58\u4ee5 255</p> <ul> <li>\u6bb5\u5730\u5740\uff1a\u504f\u79fb\u5730\u5740\uff08\u903b\u8f91\u5730\u5740\u5bfb\u5740\uff09   \u4ee55\u4f4d16\u8fdb\u5236\u7684\u5f62\u5f0f   XXXX:0000~~XXXX:FFFF   64KB   \u903b\u8f91\u5730\u5740XXXX0+YYYY   \u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u7269\u7406\u5730\u5740\u53ef\u4ee5\u8868\u793a\u6210\u591a\u4e2a\u903b\u8f91\u5730\u5740</li> </ul> <p><code>12398h=1234:0058=1235:0048=1236:0038=1230:0098</code></p> <ul> <li> <p>\u5bfb\u5740\u65b9\u5f0f</p> </li> <li> <p>\u76f4\u63a5\u5bfb\u5740\uff08\u504f\u79fb\u5730\u5740\u4e3a\u5e38\u6570\uff0c\u6bb5\u5730\u5740\u5fc5\u987b\u4e3a\u6bb5\u5bc4\u5b58\u5668\uff09     1000H:[2000H]\u274c</p> </li> <li>\u95f4\u63a5\u5bfb\u5740\uff08\u504f\u79fb\u5730\u5740\u4e3a\u5bc4\u5b58\u5668+\u53d8\u91cf/\u6570\u7ec4\uff09</li> <li> <p>\u53d6\u5730\u5740\u8fd0\u7b97</p> </li> <li> <p>lea &amp; offset</p> <p><pre><code>\u8bbeabc\u7684\u504f\u79fb\u5730\u5740=1000h\nlea dx, abc         ; lea dx, [1000h]\nmov dx, offset abc  ; mov dx, 1000h\n\nmov dx, offset ds:[bx+si+3]   ; \u8bed\u6cd5\u9519\u8bef\nlea dx, ds:[bx+si+3]          ; dx=bx+si+3\nmov dx, bx+si+3               ; \u9519\u8bef\n\nlea eax, [eax+eax*4]          ; EAX=EAX*5 \u7528lea\u505a\u4e58\u6cd5\n</code></pre>   - lds &amp; les</p> <p>\u53d6\u8fdc\u6307\u9488\uff0c\u5e76\u5206\u522b\u628a\u6bb5\u5730\u5740\u8d4b\u7ed9ds/es\uff0c\u504f\u79fb\u5730\u5740\u8d4b\u7ed9\u76f8\u5e94\u76ee\u6807 - \u8fdc\u8fd1\u6307\u9488</p> </li> <li> <p>near ptr(\u504f\u79fb\u5730\u5740)</p> </li> <li> <p>far ptr   (\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740)</p> <p>\u5047\u5b9a\u628a\u4e00\u4e2a\u8fdc\u6307\u94881234h:5678h\u5b58\u653e\u5230\u5730\u57401000:0000\u4e2d\uff0c\u5219\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\uff1a  &amp;p=1000:0000 1000:0000 78h 1000:0001 56h 1000:0002 34h 1000:0003 12h</p> </li> </ul>"},{"location":"ASM/#_3","title":"\u7b97\u672f\u8fd0\u7b97","text":"<ul> <li><code>inc / dec  x</code>\u5355\u76ee\u8fd0\u7b97\uff08\u81ea\u52a0\u81ea\u51cf\uff0c\u4e0d\u5f71\u54cdCF\uff09</li> <li><code>add / sub  a,b</code>  \u53cc\u76ee\u8fd0\u7b97</li> <li><code>mul x</code> \u5355\u76ee\u8fd0\u7b97   \u6839\u636ex\u5bbd\u5ea6\u786e\u5b9a\u4e58\u6cd5\u5bbd\u5ea6</li> </ul> <p><pre><code>mul [1]     ah:al   = al * x\nmul [2]     dx:ax   = ax * x\nmul [4]     edx:eax = eax *x\n</code></pre> - <code>div x</code> \u5355\u76ee\u8fd0\u7b97</p> <p>\u57fa\u672c\u53ef\u89c6\u4e3a\u4e58\u6cd5\u7684\u9006\u8fd0\u7b97\uff0c\u5176\u4e2ddx\u5b58\u4f59\u6570\uff0cax\u5b58\u5546</p> <p>\uff08\u6ce8\u610fdx\u7684\u6e05\u7a7a\uff0c\u5426\u5219\u6613\u51fa\u73b0divide overflow\u62a5\u9519\uff09</p> <p>32\u4f4d\u5341\u8fdb\u5236\u8f93\u51fa</p> <p><pre><code>   mov di, 0; \u6570\u7ec4s\u7684\u4e0b\u6807\n   mov eax, abc\n   mov cx, 0; \u7edf\u8ba1push\u7684\u6b21\u6570\nagain:\n   mov edx, 0; \u88ab\u9664\u6570\u4e3aEDX:EAX\n   mov ebx, 10\n   div ebx; EAX=\u5546, EDX=\u4f59\u6570\n   add dl, '0'\n   push dx\n   inc cx; \u76f8\u5f53\u4e8eadd cx, 1\n   cmp eax, 0\n   jne again\npop_again:\n   pop dx\n   mov s[di], dl\n   inc di\n   dec cx; \u76f8\u5f53\u4e8esub cx, 1\n   jnz pop_again\n</code></pre> - <code>&amp;     |     ^      ~      &lt;&lt;     &gt;&gt;   and   or    xor    not    shl    shr</code></p> <p>\u7b80\u5355\u4f4d\u8fd0\u7b97</p> <p>\uff08\u79fb\u4f4d\u8fd0\u7b97\u6700\u540e\u79fb\u51fa\u7684\u4e00\u4f4d\u5b58\u5230CF\u4e2d\uff09 - ```   rol       ror   <pre><code>\u5faa\u73af\u79fb\u4f4d\n\n```c\nC\u8bed\u8a00\nrol()  return x&lt;&lt;n | x&gt;&gt;(sizeof(x)*8-n)\nror()  return x&gt;&gt;n | x&lt;&lt;(sizeof(x)*8-n)\n</code></pre></p> <p>\u7528\u8fd9\u4e9b\u6307\u4ee4\u6765\u5b8c\u6210\u5341\u516d\u8fdb\u5236\u8f93\u51fa\uff1a</p> <p><pre><code>again:\n   rol ax, 4  ;\u53d6\u51fa\u6700\u9ad84\u4f4d\u5230\u4f4e\u4f4d\n   push ax\n   and ax, 000Fh\n   cmp ax, 10\n   jb is_digit\nis_alpha:\n   sub al, 10\n   add al, 'A'\n   jmp finish_4bits\nis_digit:\n   add al, '0'\nfinish_4bits:\n   mov s[di], al\n   pop ax\n   pop cx\n   add di, 1\n   sub cx, 1\n   jnz again\n</code></pre> - sal: shift arithmetic left  \u7b97\u672f\u5de6\u79fb   sar: shift arithmetic right \u7b97\u672f\u53f3\u79fb   sal\u53casar\u662f\u9488\u5bf9\u7b26\u53f7\u6570\u7684\u79fb\u4f4d\u8fd0\u7b97, \u5bf9\u8d1f\u6570\u53f3\u79fb\u7684\u65f6\u5019\u8981\u5728\u5de6\u8fb9\u88651, \u5bf9\u6b63\u6570\u53f3\u79fb\u7684\u65f6\u5019\u5de6\u8fb9\u88650, \u65e0\u8bba\u5bf9\u6b63\u6570\u8fd8\u662f\u8d1f\u6570\u5de6\u79fb\u53f3\u8fb9\u90fd\u88650</p>"},{"location":"ASM/#_4","title":"\u5806\u6808","text":"<ul> <li><code>push x</code></li> </ul> <p>16\u4f4d\u621632\u4f4d\uff0csp=sp-sizeof(x) - <code>pop x</code></p> <p>16\u4f4d\u621632\u4f4d\uff0csp=sp+sizeof(x) - <code>pushf &amp; popf</code> \u4fdd\u62a4FL\u72b6\u6001\u5bc4\u5b58\u5668 - \u624b\u52a8\u5b9a\u4e49\u5806\u6808\u7a7a\u95f4</p> <pre><code>stk segment stack\ndb 200h dup(0)    ;\u6216\u5199\u6210dw 100h dup(0)\nstk ends\n</code></pre>"},{"location":"ASM/#fl","title":"FL\u72b6\u6001\u5bc4\u5b58\u5668","text":"<p>CF ZF SF OF AF PF(\u72b6\u6001) DF TF IF\uff08\u63a7\u5236\uff09</p> <p>mov\u6307\u4ee4\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d</p> <ul> <li>CF\uff08Carry Flag\uff09   \u52a0\u6cd5\u8fdb\u4f4d\uff0c\u51cf\u6cd5\u501f\u4f4d</li> </ul> <p><pre><code>jc  jnc  (jump if (not)carry flag)\nadc      (add+CF)\nsbb      (sub+CF)\nclc CF=0\nstc CF=1\n</code></pre> - ZF(Zero Flag) - SF (Sign Flag   1 --&gt; - ) - OF (Overflow Flag) - PF\uff08Parity Flag\uff09</p> <p>\u5947\u5076\u6807\u5fd7\uff0c\u53ef\u505a\u6821\u9a8c\uff0c\u4f4e\u516b\u4f4d\u4e2d\u76841\u7684\u4e2a\u6570\uff0c1 --&gt; \u6709\u5076\u6570\u4e2a1 - AF(Auxiliary Flag)</p> <p>\u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\uff0c1 --&gt; \u7b2c\u56db\u4f4d\u4e0e\u9ad8\u56db\u4f4d\u8fdb\u4f4d\u6216\u501f\u4f4d\u65f6 - DF(Direction Flag)   \u5b57\u7b26\u4e32\u590d\u5236\u65b9\u5411</p> <p><pre><code>cld DF=0 \u6b63\u65b9\u5411\nstd DF=1 \u53cd\u65b9\u5411\n</code></pre> - IF(Interrupt Flag)   1 --&gt; \u5141\u8bb8\u4e2d\u65ad</p> <p><pre><code>cli   (\u7f6e0)\n\u514d\u6253\u6270\u7a0b\u5e8f\u6bb5\nsti  \uff08\u7f6e1\uff09\n</code></pre> - TF(Trap Flag)   1 --&gt; \u8fdb\u5165\u5355\u6b65\u6a21\u5f0f\uff0c\u6bcf\u6761\u6307\u4ee4\u540e\u9690\u542bint 1H\uff08callback\uff09   \u7528\u4e8edebug\uff0c\u53cd\u8c03\u8bd5   \u88ab\u52a8\u9632\u5fa1\uff1a\u6821\u9a8c\u4ee3\u7801\u9632\u6b62\u66f4\u6539   \u4e3b\u52a8\u9632\u5fa1\uff1a\u62a2\u593a\u8d44\u6e90\uff0c\u81ea\u5df1\u83b7\u5f97int 1H\u4e3b\u52a8\u6743</p>"},{"location":"ASM/#_5","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c","text":"<ul> <li>xlat(\u67e5\u8868)</li> </ul> <p>al=ds:[bx+al] - movsb movsw movsd(\u5bbd\u5ea6\u4e0d\u540c)</p> <p>\u2460ds:si   \u6e90\u5b57\u7b26\u4e32(si\u5c31\u662fsource index)   \u2461es:di  \u76ee\u6807\u5b57\u7b26\u4e32(di\u5c31\u662fdestination index)   \u2462cx      \u79fb\u52a8\u6b21\u6570   \u2463DF=0 \u5373\u65b9\u5411\u6807\u5fd7\u8bbe\u6210\u6b63\u65b9\u5411(\u7528\u6307\u4ee4cld) - stosb stosw stosd(\u5bbd\u5ea6\u4e0d\u540c)</p> <p>mov es:[di],     al/ax/eax</p>"},{"location":"ASM/#_6","title":"\u5173\u4e8e\u5faa\u73af","text":"<pre><code>loop label    ;while(--CX) jmp label\nloopz label   ;while(ZF &amp;&amp; --CX) jmp label\nloopnz label  ;while(!ZF &amp;&amp; --CX) jmp label\n</code></pre>"},{"location":"ASM/#_7","title":"\u5e38\u7528\u4e2d\u65ad","text":"<pre><code>\u7b49\u6548\u64cd\u4f5c\npushf, push cs, push ip\ntf = 0, if = 0\nip = word ptr 0:[n*4], cs = word ptr 0:[n*4+2]\n\nmov ah,01H\nint 21H           ;al=getchar()\n\nmov ah,02H\nint 21H           ;putchar(dl)\n\nmov ah,09H\nint 21H           ;cout &lt;&lt; ds:[dx]--&gt;'$'\n\nmov ah,0AH  \nint 21H           ;getline( ds:[dx+2] )\n          ;\u5176\u4e2dds:[dx]\u4e3a\u6700\u5927\u8bfb\u5165\u91cf\uff08\u8bb0\u5f97\u7f6e\u4e00\u4e2a\u5927\u6570\uff09\n          ;ds:[dx+1] \u4e3a\u5b9e\u9645\u8bfb\u5230\u7684\u5b57\u7b26\u6570 \n\nmov ah,4CH\nint 21H           ;exit\n\nmov ah,00H\nint 16H           ;AH = BIOS scan code\n                  ;AL = ASCII character\n\nmov ah,3DH\nint 21H           ;openfile\n\n;AL = access and sharing modes\n;DS:DX -&gt; ASCIZ filename\n;CL = attribute mask of files to look for\n\n;Return:\n;CF clear if successful\n;AX = file handle\n;CF set on error\n;AX = error code (01h,02h,03h,04h,05h,0Ch,56h)\n</code></pre>"},{"location":"ASM/#bcd","title":"\u5173\u4e8eBCD\u7801","text":"<p>\u4e00\u79cd\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a\u5341\u8fdb\u5236\u6570\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u7aef\u53e3\u4e2d\u65f6\u949f</p> <p>15H   <code>&lt;----&gt;</code>   15D</p> <ul> <li> <p>\u538b\u7f29BCD    4\u4f4d\u8868\u793a\u4e00\u4e2a\u5341\u8fdb\u5236\u4f4d</p> </li> <li> <p>daa  \u52a0\u6cd5\u8c03\u6574     \u5177\u4f53\u5730</p> </li> </ul> <p><pre><code>if((AL &amp; 0FH) &gt;= 0AH) AL += 6H     //\u4f4e\u4f4d\nif((AL &amp; 0F0H) &gt;= 0AH) AL += 60H   //\u9ad8\u4f4d\n</code></pre>   - das \u51cf\u6cd5\u8c03\u6574\u7c7b\u4f3c - \u975e\u538b\u7f29BCD     8\u4f4d\u8868\u793a\u4e00\u4e2a\u5341\u8fdb\u5236\u4f4d</p> <p>8\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u9ad8\u56db\u4f4d\u6ca1\u7528</p> <p>0306H  <code>&lt;----&gt;</code>  3366H  <code>&lt;----&gt;</code> 36D</p> <ul> <li>aaa  \u52a0\u6cd5\u8c03\u6574</li> <li>\u5177\u4f53\u5730</li> </ul> <p><pre><code>if((AL &amp; 0FH) &gt;= 0AH) AL += 6 , AH++\n</code></pre>   - aas \u51cf\u6cd5\u8c03\u6574\u7c7b\u4f3c   - aam \u4e58\u6cd5\u8c03\u6574</p> <pre><code>```cpp\nAH /= 10\nAL %= 10\n```\n</code></pre> <ul> <li> <p>aad \u9664\u6cd5 \u524d \u9884\u5148\u8c03\u6574</p> <pre><code>AL = (AH * 10 + AL) &amp; 0FFH\nAH = 0\n</code></pre> </li> </ul>"},{"location":"CS231n/","title":"CS 231n","text":"<p>Systematical learning Machine Learning in CV</p>"},{"location":"CS231n/#resources","title":"Resources","text":"<ul> <li>My Repository</li> <li>Official Notes</li> <li>Course Website</li> </ul>"},{"location":"CS231n/#some-newly-learned-thoughts","title":"Some newly-learned thoughts","text":""},{"location":"CS231n/#training-sets-validation-sets-test-sets","title":"Training sets, validation sets &amp; test sets","text":"<ul> <li>We should isolate the test sets with the training process, \"just test the final model at the very end\" to avoid overfitting</li> <li>Often validation sets are extracted from training sets</li> </ul>"},{"location":"CS231n/#parameters-in-linear-model","title":"Parameters in Linear Model","text":"<ul> <li>We can view the Weight Matrix as a set of templates, and the scores as the similarity between the input and the templates</li> <li>So when printing the weights, we can somehow visualize the templates we learned</li> <li>Picture below is what we learned from the CIFAR-10 dataset using SVM   </li> </ul>"},{"location":"CS231n/#svm-support-vector-machine","title":"SVM (Support Vector Machine)","text":"<ul> <li>Hinge Loss: \\(L_i = \\sum_{j\\neq y_i} \\max(0, s_j - s_{y_i} + margin)\\), so-called max-margin loss because it encourages the correct class to have a score higher than the incorrect class by at least a margin</li> <li>The hinge loss is \"easy to be satisfied\" since it only cares about the margin, not the exact value of the score (e.g. [1,0] &amp; [100,-100] both have the same loss when the margin is 1)</li> </ul>"},{"location":"CS231n/#differentiation-on-vectors","title":"Differentiation on Vectors","text":"<ul> <li>Split: Trying to do the differentiation on a smaller vector or even a single element instead of a matrix.</li> </ul> <p>For example, solving Softmax - Cross Entropy Loss: \\(x\\) is a 1-D linear vector \\(\\frac{\\partial{Loss}}{\\partial{x}}=\\frac{\\partial{Loss}}{\\partial{score}} \\frac{\\partial{score}}{\\partial{x}}= -\\frac{1}{score_i} \\frac{\\partial{score_i}}{\\partial{x_i}}=-\\frac{1}{score_i} score_i (score_i - (y_i == i))\\)</p> <ul> <li>Dimension: Use Dimension to check or gain a overview of the result.</li> </ul>"},{"location":"CS231n/#process","title":"Process","text":"<ul> <li> <p>Preprocessing matters a lot.</p> <ul> <li>Mean subtraction: Subtract the mean of the data, thus the data should be centered around the origin</li> <li>Normalization: Divide the data by the standard deviation, thus the data should be normalized to a similar scale</li> <li>PCA: Reduce the dimension of the data, thus the data should be more efficient to compute.For example, SVD etc.</li> <li>Feature extraction: Extract the features from the raw data, thus the data should be more informative to the model. For example, HOG, Color Histogram etc.</li> <li>Data Augmentation: Generate more data from the original data, thus the model should be more robust to the noise. For example, flip, rotate, crop etc.</li> </ul> </li> <li> <p>Training</p> <ul> <li>Optimization: The gradient descent, the stochastic gradient descent, the mini-batch gradient descent, the momentum, the RMSprop, the Adam etc.</li> <li>Hyparameter Debug: The learning rate, the regularization strength, the number of hidden units, the number of layers, the number of epochs, the batch size etc.</li> <li>Monitor the Process: The loss, the accuracy, the gradient, the weights, the features etc.</li> <li>Visualize the Result: The weights, the features, the templates etc.</li> </ul> </li> </ul>"},{"location":"CS231n/#assignment","title":"Assignment","text":""},{"location":"CS231n/#assignment-1","title":"Assignment 1","text":""},{"location":"CS231n/#k-nn-k-nearest-neighbors","title":"K-NN (K Nearest Neighbors)","text":"<ul> <li>No training, just memorizing the data</li> <li>In prediction, compute the Distance with every sample (Costly)</li> <li>Use K-fold cross validation to find the best K. Concretely speaking, split the training sets into K folds, and choose each as validation set, and evaluate the model finally.</li> </ul>"},{"location":"CS231n/#svm-support-vector-machine_1","title":"SVM (Support Vector Machine)","text":"<ul> <li>Hinge Loss: \\(L_i = \\sum_{j\\neq y_i} \\max(0, s_j - s_{y_i} + margin)\\)</li> <li>Regularization: \\(L = \\frac{1}{N} \\sum_i L_i + \\frac{1}{2}\\lambda |W|^2\\), where \\(\\lambda\\) is the regularization strength</li> <li> <p>Gradient Descent:</p> <ul> <li>\\(W -= \\alpha \\nabla_W L\\),</li> <li>\\(\\nabla_W L_{yi} = - \\Sigma_{j \\neq y_i}1(w_jx_i + \\Delta &gt; 0)x_i\\)</li> <li>\\(\\nabla_W L_i = 1(w_jx_i + \\Delta &gt; 0)x_i\\)</li> </ul> </li> </ul>"},{"location":"CS231n/#softmax","title":"Softmax","text":"<ul> <li>Cross Entropy Loss: \\(L_i = -\\log(\\frac{e^{score_{y_i}}}{\\Sigma_j e^{score_j}})\\)</li> <li>Gradient Descent: \\(W -= \\alpha \\nabla_W L\\), where \\(\\nabla_W L_i = -x_i(\\frac{e^{score_{y_i}}}{\\Sigma_j e^{score_j}} - 1)\\)</li> </ul>"},{"location":"CS231n/#2-layer-network","title":"2-Layer Network","text":"<ul> <li>Combination of the lessons above. Not so hard to complete.</li> <li>Softmax gradient, however, seems hard to do right? But the final implement of training 2-layer network runs well and achieves the accuray of about 50%</li> <li></li> </ul>"},{"location":"CS231n/#feature-extraction","title":"Feature Extraction","text":"<ul> <li>Color Histogram: Count the number of pixels in each color channel</li> <li>HOG (Histogram of Oriented Gradients): Count the number of gradients in each direction</li> <li>Training on raw pixel V/S on features: After extracting the features, the model can outperform the raw pixel model a lot.</li> </ul>"},{"location":"CS231n/#assignment-2","title":"Assignment 2","text":""},{"location":"CS231n/#fully-connected-neural-network","title":"Fully Connected Neural Network","text":"<ul> <li>Multi-layer packaged class</li> <li> <p>Optimization</p> <ul> <li> <p>SGD(Stochastic Gradient Descent):</p> <p>\\(W -= \\alpha \\ d_W\\) </p> <ul> <li>Simplest way (converge slowly)</li> </ul> </li> <li> <p>SGD_Momentum:</p> <p>\\(v = \\beta v - \\alpha \\ d_W\\) </p> <p>\\(W += v\\) </p> <ul> <li>Simulate the physical process as ball rolling down the hill</li> </ul> </li> <li> <p>RMSprop:</p> <p>\\(cache = \\beta cache + (1-\\beta) d_W^2\\) </p> <p>\\(W -= \\alpha \\frac{d_W}{\\sqrt{cache} + \\epsilon}\\) (\\(\\epsilon\\) avoids division by zero) </p> <ul> <li>Adjust the learning rate adaptively, but the gradient may become too small</li> </ul> </li> <li> <p>Adam:</p> <p>\\(m = \\beta_1 m + (1-\\beta_1) d_W\\) </p> <p>\\(v = \\beta_2 v + (1-\\beta_2) d_W^2\\) </p> <p>\\(mt = \\frac{m}{1-\\beta_1^t}\\) </p> <p>\\(vt = \\frac{v}{1-\\beta_2^t}\\) </p> <p>\\(W -= \\alpha \\frac{mt}{\\sqrt{vt} + \\epsilon}\\) </p> <ul> <li>Combine the advantages of RMSprop and Momentum</li> </ul> </li> </ul> </li> </ul>"},{"location":"CS231n/#normalization","title":"Normalization","text":"<ul> <li> <p>Batch Normalization:</p> <ul> <li>Normalize the input of each layer, thus the model should be more robust to the noise and the gradient should be more stable, - But the performance depends on the batch size a lot.</li> <li>Gradient reference</li> </ul> </li> <li> <p>Layer Normalization:</p> <ul> <li>Normalize the input of each sample, thus the model should be more robust to the noise and the gradient should be more stable.</li> <li>But the performance may be influenced by the feature dimensions.</li> <li>Gradient is easy. We can transpose the matrix and transform the problem into the batch normalization.</li> <li>(N,D) -&gt; (D,N)</li> </ul> </li> <li> <p>Problem: The result of my code seems somewhat strange, like normalization works worse than without normalization. I think the problem may be the learning rate or the batch size, but I have no energy to debug it. </p> </li> </ul>"},{"location":"CS231n/#dropout","title":"Dropout","text":"<ul> <li>Randomly set some neurons to zero, thus the model should be more robust to the noise and the overfitting should be avoided.</li> <li><code>mask = (np.random.rand(*x.shape) &lt; p) / p</code></li> <li><code>p</code> is the probability of keeping a neuron active, and thus the mean of the output (or mathematical expectation) should be the same as the input.</li> </ul>"},{"location":"CS231n/#convolutional-neural-network","title":"Convolutional Neural Network","text":"<ul> <li> <p>Convolution Layer</p> <ul> <li> <p>Filter</p> <ul> <li>The learned template to extract the features</li> <li>Often \\(3*3*C\\) with stride 1</li> <li>Share parameters. Using the same filter to do convolution on the whole input, thus the model should be more efficient to compute and the number of parameters should be highly reduced.</li> <li>Too large filter may lead to a linear model, and costs more memory.</li> <li>Examples of features</li> </ul> <p></p> </li> <li> <p>Padding</p> <ul> <li>Add some zeros around the input, thus the output should be the same size as the input, which is convenient for the next layer to compute.</li> <li>Avoid the information loss on edges.</li> <li>\\(P = \\frac{F-1}{2}\\), where \\(F\\) is the size of the filter</li> </ul> </li> <li> <p>Pooling</p> <ul> <li>Max Pooling: \\(max(x)\\) (Popular in practice, often \\(2 * 2\\))</li> <li>Average Pooling: \\(mean(x)\\)</li> <li>Reduce the size of the input, thus the model should be more efficient to compute and the number of parameters should be highly reduced.</li> <li>Avoid the overfitting and the noise.</li> </ul> </li> <li> <p>Layer Strutcture</p> <ul> <li>Input: \\(N * C * H * W\\)</li> <li>Filter: \\(F * C * HH * WW\\)</li> <li>Output: \\(N * F * H' * W'\\)</li> <li>Activation (often Relu): \\(N * F * H' * W'\\)</li> <li>Pooling: \\(N * F * H'' * W''\\)</li> </ul> </li> </ul> </li> <li> <p>Normalization</p> <ul> <li> <p>Spatial Batch Normalization</p> <ul> <li>Similar to Batch Normalization.</li> <li><code>X = x.transpose(0, 2, 3, 1).reshape(-1, C)</code></li> </ul> </li> <li> <p>Group Normalization</p> <ul> <li>Similar to Layer Normalization.</li> <li><code>X = x.reshape(N*G, -1)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"CS231n/#pytorch","title":"PyTorch","text":"<ul> <li>Useful tool to build the model and train the model</li> <li>Tutorial</li> <li>Docs</li> <li> <p>Structure</p> <ul> <li> <p><code>nn.Module</code></p> <ul> <li>Personalized model, more flexible</li> <li>Implement <code>forward</code> function</li> </ul> </li> <li> <p><code>nn.Sequential</code></p> <ul> <li>Simple model, just concatenate the layers</li> </ul> </li> </ul> </li> <li> <p>Optimization</p> <ul> <li><code>optim.SGD</code></li> <li><code>optim.Adam</code></li> <li><code>optim.RMSprop</code></li> <li>Backward Propagation</li> </ul> <pre><code>    optimizer.zero_grad() # clear\n\n    loss.backward()       # backpropagation\n\n    optimizer.step()      # update\n</code></pre> </li> <li> <p>Training</p> </li> </ul>"},{"location":"CS231n/#assignment-3","title":"Assignment 3","text":""},{"location":"CS231n/#visualizing","title":"Visualizing","text":"<ul> <li> <p>Salicency Maps</p> <ul> <li>A saliency map tells us the degree to which each pixel in the image affects the classification score for that image. </li> <li>To compute it, we compute the gradient of the unnormalized score corresponding to the correct class with respect to the pixels of the image.</li> <li>Or say, it visualizes the feature map of the input image.</li> </ul> </li> <li> <p>Fooling Images</p> <ul> <li>We can perform gradient ascent on the input image to maximize the class score, stopping when the network classifies the image as the target class. </li> <li>In practice, the fooling images often just looks like blurring the original image a little bit.</li> </ul> </li> <li> <p>Class Visualization</p> <ul> <li>We can also synthesize an image to maximize the classification score of a particular class </li> <li>Or say, visualizes what the network thinks various classes look like.</li> <li>Looks like AIGC images</li> </ul> </li> </ul>"},{"location":"CS231n/#rnn-captioning","title":"RNN Captioning","text":"<ul> <li> <p>Vanilla RNN</p> <ul> <li>The simplest RNN, but the gradient may vanish or explode.</li> <li>Use the hidden state to store the information of the previous time step, and use the input to update the hidden state.</li> <li> <p>\\(h_t = \\tanh(W_{hh}h_{t-1} + W_{xh}x_t)\\)</p> <p>\\(y_t = W_{hy}h_t\\)</p> </li> <li>The gradient is easy to compute, but the performance is not so good.</li> </ul> </li> <li> <p>LSTM</p> <ul> <li>The most popular RNN, with the forget gate, the input gate, the output gate.</li> <li>The gradient is easy to compute, and the performance is good.</li> <li> <p>\\(f_t = \\sigma(W_{hf}h_{t-1} + W_{xf}x_t + b_f)\\)</p> <p>\\(i_t = \\sigma(W_{hi}h_{t-1} + W_{xi}x_t + b_i)\\)</p> <p>\\(o_t = \\sigma(W_{ho}h_{t-1} + W_{xo}x_t + b_o)\\)</p> <p>\\(g_t = \\tanh(W_{hg}h_{t-1} + W_{xg}x_t + b_g)\\)</p> <p>\\(c_t = f_t \\odot c_{t-1} + i_t \\odot g_t\\)</p> <p>\\(h_t = o_t \\odot \\tanh(c_t)\\)</p> </li> </ul> </li> </ul>"},{"location":"CS231n/#transformer","title":"Transformer","text":"<ul> <li> <p>Attention Is All You Need</p> </li> <li> <p>Highly Recommend Movie By Hung-yi Lee </p> </li> <li> <p>Actually I havn't understood it well yet today, 2024.2.27</p> <p>After watching the lecture of Lee, now I got some new thoughts, 2024.2.28</p> </li> <li> <p>Structure</p> <ul> <li>Basic structure in paper:</li> </ul> <p></p> <ul> <li>Abstract structure:</li> </ul> <p></p> </li> <li> <p>Attention Mechanism</p> <ul> <li> <p>Self-Attention</p> <ul> <li>Scaled Dot-Product Attention</li> </ul> <p>\\(Attention(Q,K,V) = softmax(\\frac{QK^T}{\\sqrt{d_k}})V\\)</p> <p>Q is the query to match others, K is the key to be matched, V is the value to be extracted </p> <p></p> <ul> <li> <p>Use Dot-Product to compute the relationship between the query and the key, and use the softmax to normalize the result.</p> </li> <li> <p>Concretely, \\(Q_i\\) will be used to compute the attention score with all \\(K_j\\), and the corresponding result \\(score_{i, j}\\) will be used to compute the weighted sum of all \\(V_j\\), which is the output</p> </li> <li> <p>Finally multiply the value with the normalized result, converting the attention score to the output. </p> </li> </ul> </li> <li> <p>Multi-Head Attention</p> <ul> <li> <p>Split the input/output dimension into multiple smaller heads.</p> </li> <li> <p>Compute the attention score with multiple parallel attention mechanisms, and concatenate the result.</p> </li> </ul> <p></p> <ul> <li>Thus the model should be more expressive and the performance should be better, for multiple smller attention mechanisms can capture different features and run more efficiently.</li> </ul> </li> </ul> </li> <li> <p>Embedding</p> <ul> <li> <p>Positional Encoding</p> <ul> <li> <p>Since transformer discards the sequential information, we need to add the positional encoding to the input embedding.</p> </li> <li> <p>Just add the position embedding to the input embedding.</p> </li> </ul> <p>\\(PE(pos,\\ 2i) \\ \\ \\ \\ \\ \\ = \\sin(pos/10000^{2i/d_{model}})\\)</p> <p>\\(PE(pos,2i+1) = \\cos(pos/10000^{2i/d_{model}})\\)</p> <ul> <li>Use the sine and cosine function to encode the position information, because it's easy to add length when training length changes.</li> </ul> </li> <li> <p>Word Embedding</p> <ul> <li> <p>Use the pre-trained word embedding, or train the word embedding with the model.</p> </li> <li> <p>Similar to that of RNN.</p> </li> </ul> </li> </ul> </li> <li> <p>Other Tricks</p> <ul> <li> <p>Residual Connection</p> </li> <li> <p>Normalization</p> </li> <li> <p>Feed Forward Network</p> </li> <li> <p>Optimizer </p> </li> </ul> </li> <li> <p>Training</p> <ul> <li> <p>Input features</p> <ul> <li> <p>Embedding</p> <ul> <li>Embedding the features annd positional encoding</li> </ul> </li> <li> <p>Encoders </p> <ul> <li> <p>Multi-Head Attention</p> <ul> <li>Compute the attention score with multi-head attention, where both the query, the key and the value are derived from the input features</li> </ul> <p></p> <ul> <li>It looks like the input query with itself, or say, the input features are used to compute the attention score (relationships) with itself, so it's called self-attention. </li> </ul> </li> <li> <p>Multi-layers </p> <ul> <li>Multiple feed forward network with residual connection and normalization</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Output words (Expected Answers)</p> <ul> <li> <p>Embedding</p> <ul> <li>Feed in the Output in parallel</li> </ul> <p>For example </p> <p>With mask, it's just like spliting a sentence into N datas where \\(O_i\\) contains the first \\(i\\) words, and is to predict the next one. </p> <p>Thus the model should be more efficient to train in parallel.</p> <ul> <li> <p>Mask</p> <ul> <li> <p>To train the model in parallel, we need to mask the future words, otherwise the model may cheat.</p> </li> <li> <p>A trilled matrix is great to mask the future words.</p> </li> </ul> </li> </ul> </li> <li> <p>Decoders</p> <ul> <li> <p>2 Multi-Head Attention</p> <ul> <li> <p>Self. </p> <p>Compute the attention score with multi-head attention, where the query, the key and the value are all derived from the output features.</p> </li> <li> <p>Combine.</p> <p>Compute the attention score with multi-head attention, where the query is derived from the output features, and the key and the value are derived from the input features.</p> </li> </ul> </li> <li> <p>Multi-layers</p> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Prediction</p> <ul> <li> <p>Output starts with a  token. <li> <p>Use the model to pick the next most possible word, and feed it back to the model.</p> </li> <li> <p>Repeat until the  token is picked. <li> <p>Some thoughts of my opnion</p> <ul> <li> <p>Compared to CNN, the transformer can access the global information, ganining the ability to capture the long-range dependencies, and thus the performance should be better.</p> </li> <li> <p>Compared to RNN, the transformer can train in parallel instead of sequentially, and thus the model should be more efficient to train.</p> </li> </ul> </li>"},{"location":"CS231n/#gan-generative-adversarial-network","title":"GAN (Generative Adversarial Network)","text":"<ul> <li> <p>Paper</p> </li> <li> <p>Structure</p> <ul> <li> <p>Generator</p> <ul> <li> <p>To generate the fake data.</p> </li> <li> <p>Viewed as a possibility distribution, trying to fit the real data distribution. </p> </li> </ul> </li> <li> <p>Discriminator</p> <ul> <li>To distinguish the real data from the fake data through learning the real data distribution.</li> </ul> </li> </ul> </li> <li> <p>Main Idea</p> <ul> <li> <p>A Min-Max Game</p> <ul> <li> <p>The generator tries to generate the fake data to cheat the discriminator</p> <p>The discriminator tries to distinguish the real data from the fake data.</p> </li> <li> \\[\\underset{G}{\\text{minimize}}\\; \\underset{D}{\\text{maximize}}\\; \\mathbb{E}_{x \\sim p_\\text{data}}\\left[\\log D(x)\\right] + \\mathbb{E}_{z \\sim p(z)}\\left[\\log \\left(1-D(G(z))\\right)\\right]\\] </li> <li> <p>The two are just like playing aganist each other, and thus both models should be trained to be better and better to \"beat\" the other one.</p> <p>Finally the generator should be able to fit the real data distribution well while the discriminator should just be fooled as a random guesser (with 50% possibility).</p> </li> <li> <p></p> <p>Black points denote real data</p> <p>Green ones denote generator distribution</p> <p>Blue ones denote output of the discriminator (possibility to be real)</p> </li> </ul> </li> </ul> </li> <li> <p>Training</p> <ul> <li> <p>Build the generator and the discriminator</p> </li> <li> <p>Key Steps</p> <ul> <li> <p>Generate the fake data using the generator</p> </li> <li> <p>Use the real-fake data loss to train the discriminator for P steps</p> <ul> <li> \\[ \\ell_D = -\\mathbb{E}_{x \\sim p_\\text{data}}\\left[\\log D(x)\\right] - \\mathbb{E}_{z \\sim p(z)}\\left[\\log \\left(1-D(G(z))\\right)\\right]\\] </li> </ul> </li> <li> <p>Use the fake data loss to train the generator for Q steps</p> <ul> <li> \\[ \\ell_G = -\\mathbb{E}_{z \\sim p(z)}\\left[\\log \\left(D(G(z))\\right)\\right]\\] </li> </ul> </li> </ul> </li> <li> <p>Important tricks on loss functions</p> <ul> <li> <p>Here we actually convert the min-max game to a min-min (mind the minus) game, because a min-max game is hard to train and may fall into a cycle.</p> </li> <li> <p>We use batch average to approximate the expectation, highly reducing the cost of computation.</p> </li> </ul> </li> <li> <p>PS: The training optimization and tricks of normal deep learning are still useful, and many so-called improved GAN models are based on these tricks.</p> </li> </ul> </li> <li> <p>Some improved models</p> <ul> <li> <p>LSGAN (Least Squares GAN)</p> <ul> <li> <p>Paper</p> </li> <li> <p>Use the least squares loss instead of the binary cross entropy loss, thus the gradient should be more stable and sharp.</p> </li> <li> \\[\\underset{G}{\\text{minimize}}\\; \\underset{D}{\\text{maximize}}\\; \\mathbb{E}_{x \\sim p_\\text{data}}\\left[(D(x)-1)^2\\right] + \\mathbb{E}_{z \\sim p(z)}\\left[D(G(z))^2\\right]\\] </li> </ul> </li> <li> <p>DC-GAN (Deep Convolutional GAN)</p> <ul> <li> <p>Paper</p> </li> <li> <p>Use the convolutional neural network to build the generator and the discriminator, bettering the performance.</p> </li> </ul> </li> <li> <p>Results on MNIST</p> </li> </ul> <p></p> </li> </ul>"},{"location":"CS231n/#self-supervised-learning","title":"Self-Supervised Learning","text":"<ul> <li> <p>Main Idea</p> <ul> <li>Use the data without labels to self-supervise the model.</li> </ul> </li> <li> <p>Contrastive Learning</p> <ul> <li> <p>Main Idea</p> <ul> <li> <p>Doing Augumentation on the input data to get a positive pair, and combine the loss of both positive pairs and negative pairs to train the model. </p> </li> <li> <p>That is, when distinguishing a totally different data, the model may easily do it by grabbing some unimportant features. So we feed them with similar data, force the model to extract the significant features.</p> </li> </ul> </li> <li> <p>SimCLR (Simple Contrastive Learning)</p> <ul> <li> <p>Paper</p> </li> <li> <p>Structure</p> <ul> <li> <p>Two branches to generate the positive pairs</p> </li> <li> <p>\\(f()\\) to extract the features</p> </li> <li> <p>\\(g()\\) to project the features, or say, a typical classifier</p> </li> <li> <p> </p> </li> </ul> </li> <li> <p>Training</p> <ul> <li> <p>Generate positive pairs (seemed quite important in training) </p> <p></p> </li> <li> <p>Feed in the batched 2*N datas, where larger N preferred</p> </li> <li> <p>Minimize the loss (Maximize the agreement)</p> <ul> <li> \\[\\ell = -\\frac{1}{2N}\\sum_{i=1}^{N}\\left[\\log\\frac{\\exp(sim(f(x_i),f(x_{i^+}))/ \\tau)}{\\sum_{j=1}^{2N} (j!=i) \\exp(sim(f(x_i),f(x_j))/ \\tau)}\\right]\\] </li> </ul> </li> </ul> </li> <li> <p>Results</p> <ul> <li> <p>Improved the performance of a pre-trained model a lot.</p> </li> <li> <p> </p> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"DigitLogic/","title":"Logic and Computer Design Fundamentals","text":"<p>~~this review mainly focus on some special points and terminology~~</p>"},{"location":"DigitLogic/#some-special-codes","title":"Some Special Codes","text":"<ul> <li>BCD</li> </ul> <p>4 Binary bit as a Decimal bit Simply flatten up in converting</p> <ul> <li> <p>Excess 3 code</p> <ul> <li> <p>BCD + 3</p> </li> <li> <p>easy to do adding(automatically add carry)</p> </li> </ul> </li> <li> <p>Gray</p> </li> </ul> <p>Flip only one bit each turn \\(Gray Code = (K)_2 \\ \\ xor \\ \\ ((K)_2 &gt;&gt; 1)\\) Useful in K-map and optimization!</p> <ul> <li> <p>Parity Bit</p> </li> <li> <p>odd parity &amp; even parity</p> <ul> <li>Final result of 1's</li> </ul> </li> <li> <p>MSB &amp; LSB</p> <ul> <li>Most/Least Significant Bit</li> </ul> </li> <li> <p>Unsigned integer</p> </li> <li> <p>Radix Complement(\u8865\u7801)</p> <ul> <li>r\u2019s complement for radix r</li> <li>2\u2019s complement in binary</li> <li>Defined as \\(r^N - x\\)</li> <li>In Binary, as (~x + 1)</li> </ul> </li> <li> <p>Diminished Radix Complement\uff08\u53cd\u7801\uff09</p> <ul> <li>(r - 1)\u2019s complement for radix r</li> <li>1\u2019s complement for radix 2</li> <li>Defined as \\(r^N - 1 - x\\) , \"flipping\" every bit actually</li> </ul> </li> <li> <p>Signed integer</p> <ul> <li> <p>positive</p> <ul> <li>Both 1's and 2's complement are the same as true code</li> </ul> </li> <li> <p>negative</p> <ul> <li>1's complement is flipping every bit follow the sign bit</li> <li>2's complement is 1's complement + 1</li> </ul> </li> </ul> </li> </ul>"},{"location":"DigitLogic/#arithmetic-system","title":"Arithmetic System","text":"<ul> <li>In computer system, it's actually a \"\\(mod \\ r^N\\)\" system for N bit calculation</li> <li>\\(X - Y \\equiv X + r^N - Y \\equiv X + \\overline{Y}(mod \\ r^N)\\)</li> <li> <p>Unsigned Subtraction</p> <ul> <li>Use 2's Complement, then the answer actually is \\(X - Y + r^N\\)</li> <li>Thus check the final carry bit(actually Nth bit)<ul> <li>1 : \\(X \\geq Y\\), result is answer</li> <li>0 : \\(X &lt; Y\\), answer is negative, thus the answer is \\(-(r^N - result)\\)</li> </ul> </li> </ul> </li> <li> <p>Signed Subtraction</p> <ul> <li>Just use 2's Complement to convert subtraction into addition</li> </ul> </li> <li> <p>Overflow</p> <ul> <li> <p>Unsigned</p> <ul> <li>Extra carry bit in addition</li> </ul> </li> <li> <p>Signed</p> <ul> <li>(+A) + (+B) = (-C)</li> <li>(-A) + (-B) = (+C)</li> </ul> </li> </ul> </li> </ul>"},{"location":"DigitLogic/#boolean-algebra","title":"Boolean Algebra","text":"<ul> <li>Dual<ul> <li>Interchange only And/Or</li> </ul> </li> <li>Complement<ul> <li>DeMorgan's Law</li> </ul> </li> <li>Duality Rules</li> </ul> <p>A boolean equation remains valid if we take the dual of the expressions on both sides of the equals sign</p> <ul> <li> <p>Important Formulars</p> <ul> <li>\\(X + XY = X\\)</li> <li>\\(X(X+Y) = X\\)</li> <li>\\(XY + X \\overline{Y} = X\\)</li> <li>\\((X+Y)(X+\\overline{Y})=X\\)</li> <li>\\(X + \\overline{X}Y = X + Y\\)</li> <li>\\(X(\\overline{X}+Y)=XY\\)</li> <li>Consensus Theorem</li> </ul> </li> </ul> <p>\\(XY+\\overline{X}Z+YZ=XY+\\overline{X}Z\\)            (YZ is redundant) \\((X+Y)(\\overline{X}+Z)(Y+Z)=(X+Y)(\\overline{X}+Z)\\)        (dual)</p> <ul> <li>Canonical Form<ul> <li>SOM (sum of miniterm)<ul> <li>Choose 1's</li> </ul> </li> <li>POM (product of maxterm)<ul> <li>Choose 0's</li> </ul> </li> <li>SOP (sum of product)<ul> <li>Choose 1's</li> <li>Every product term contains all variables</li> </ul> </li> </ul> </li> <li>Cost<ul> <li>Literal cost<ul> <li>Number of literals</li> </ul> </li> <li>Gate-input cost<ul> <li>Input wires (literal cost + combinational structure)</li> </ul> </li> <li>Gate-input cost with NOTs<ul> <li>Gate-input cost + NOTs (count every literal only once)</li> </ul> </li> </ul> </li> <li>K-map<ul> <li>Implicant<ul> <li>A product term in SOP</li> </ul> </li> <li>Prime Implicant<ul> <li>A product term obtained by combining the maximum possible number of adjacent squares in the map with \\(2^N\\) number of squares</li> </ul> </li> <li>Essential Prime Implicant<ul> <li>Prime Implicant that essentially covers some squares(must pick)</li> </ul> </li> <li>Don't cares<ul> <li>Self assume the value, mostly choose 1</li> </ul> </li> <li>POS optimization<ul> <li>Optimize the \\(\\overline{F}\\) which is SOP</li> </ul> </li> </ul> </li> </ul>"},{"location":"DigitLogic/#combinational-logic","title":"Combinational Logic","text":"<ul> <li> <p>Delays</p> </li> <li> <p>Transition Time (Focus on output change)</p> <ul> <li>\\(t_{LH}=t_r\\) : 10% Low to 90% High  (rise)</li> <li>\\(t_{HL}=t_f\\) : 90% High to 10% Low  (fall)</li> </ul> </li> <li>Propagation Delay (Focus on output change by input change)<ul> <li>Time from half of input change to half of output change</li> <li>\\(t_{pd} = max(t_{pHL}, t_{pLH})\\)  (sometimes is average)</li> </ul> </li> <li>Model<ul> <li>Transport Delay<ul> <li>\\(t_{pd}=t_{\u56fa\u6709}+k*SL\\) (sum of fan-out standard loads)</li> </ul> </li> <li>Inertial Delay<ul> <li>Rejection Time : rejects narrow \u201cpulses\u201d on the outputs</li> </ul> </li> </ul> </li> <li> <p>Technology Mapping</p> <ul> <li>Use NAND/NOR to implement any logic</li> <li>Optimize<ul> <li>Push down NOTs</li> <li>Remove redundant gates (linked NOTs)</li> <li>Keep doing</li> </ul> </li> </ul> </li> <li> <p>Decoder</p> <ul> <li>\\(N - 2^N\\) One-Hot Decoder</li> <li>Hierarchical Design<ul> <li>\\(N-2^N = (\\frac{N}{2} - 2^{\\frac{N}{2}} )\\times (\\frac{N}{2} - 2^{\\frac{N}{2}})\\)</li> <li>Sometimes we can use ENABLE as a select signal</li> </ul> </li> </ul> </li> <li> <p>Encoder</p> <ul> <li>\\(2^N-N\\) One-Hot Encoder</li> <li>\\(2^K-N\\) Priority Encoder</li> </ul> </li> <li> <p>Multiplexer</p> <ul> <li>\\(2^N-1\\) MUX</li> <li>Input AND Decoder --OR--&gt; Output</li> <li>Expansion<ul> <li>Focus on how to cope with the multi-outputs of several MUXs</li> </ul> </li> <li>Implement Combinational Logic Function<ul> <li>Simple<ul> <li>Input: Output in truth table</li> <li>Select: Input</li> </ul> </li> <li>Efficient<ul> <li>Divide the input into two parts</li> <li>Select : the first part as the select signal of the second part</li> <li>Input : combination logic of the second part</li> </ul> </li> </ul> </li> <li>Use 3-state gate to optimize the cost</li> </ul> </li> <li> <p>Demultiplexer</p> <ul> <li>\\(1-2^N\\) DeMUX</li> </ul> </li> <li> <p>Half Adder  (No last carry)</p> <ul> <li>\\(S = A \\oplus B\\)</li> <li>\\(C = AB\\)</li> </ul> </li> <li> <p>Full Adder</p> <ul> <li>\\(S = (A \\oplus B)\\oplus Z\\)</li> <li>\\(C = AB + Z(A \\oplus B)\\)</li> </ul> </li> <li> <p>Ripple-Carry Binary Adder (*with \\(\\oplus\\) gate)</p> <ul> <li>Linked Full Adders</li> <li>The first carry 1 means doing subtraction(2's complement)</li> </ul> </li> <li> <p>*Carry Lookahead Adder</p> <ul> <li>\\(G_i = A_iB_i\\)</li> <li>\\(P_i = A_i \\oplus B_i\\)</li> <li>\\(C_{i+1} = G_i + P_iC_i\\)</li> <li>\\(S_i = P_i \\oplus C_i\\)</li> </ul> </li> <li> <p>(P)ROM</p> <ul> <li>Read-Only Memory</li> <li>Programmable only once</li> <li>\\(2^K \\times N\\) ROM (\\(2^K\\) addresses by \\(K - 2^K\\) Decoder, N bits per address)</li> <li>For a given address line, the connected data column is 1, others are 0</li> </ul> </li> <li> <p>PAL</p> <ul> <li>Programmable Array Logic</li> <li>Programmable only once</li> <li>K inputs into 2*K columns(\\(X/\\overline{X}\\))</li> <li>Fixed structure of N AO, but programmable AND terms</li> <li>One output can be used as input of another output as compensation</li> </ul> </li> <li> <p>PLA</p> <ul> <li>Programmable Logic Array</li> <li>Programmable only once</li> <li>K inputs into 2*K columns(\\(X/\\overline{X}\\))</li> <li>N programmable AND terms</li> <li>M programmable OR terms (select miniterms above) with M programmable XOR terms (get inverters)</li> <li>Optimize by optimizing both \\(F/\\overline{F}\\)</li> </ul> </li> <li> <p>FPGA</p> <ul> <li>Field Programmable Gate Array</li> <li>LUT</li> <li>Look-Up Table</li> <li>Like \\(2^K - 1\\) RAM</li> <li>Expansion:<ul> <li>Shannon\u2019s expansion theorem : \\(F = F(X_1, X_2, ..., X_n) = X_nF(X_1, X_2, ..., X_{n-1}, 1) + \\overline{X_n}F(X_1, X_2, ..., X_{n-1},0)\\)</li> </ul> </li> <li>*CLB<ul> <li>Configurable Logic Block</li> <li>LUT + Flip-Flop</li> </ul> </li> <li>*SM<ul> <li>Switch Matrix</li> <li>Interconnects between CLBs</li> </ul> </li> <li>*IOB<ul> <li>Input/Output Block</li> <li>Connects to the outside world</li> </ul> </li> </ul> </li> </ul>"},{"location":"DigitLogic/#sequential-logic","title":"Sequential Logic","text":"<ul> <li> <p>Synchonous &amp; Asynconous</p> <ul> <li>Synchonous : Triggered by discrete clock signal</li> <li>Asynconous : Triggered by input signal</li> </ul> </li> <li> <p>Buffer</p> <ul> <li>Store a bit, unable to change</li> <li>Delay = 2 * Inverter Delay</li> </ul> </li> <li> <p>Analysis</p> <ul> <li>Input Equation<ul> <li>\\(D_A = A(t)X(t)\\)</li> </ul> </li> <li>Output Equation<ul> <li>\\(Y(t)= F(A(t),X(t))\\)</li> </ul> </li> <li>Excitation Equation(D Flip-Flop)<ul> <li>\\(D_A = A(t+1)\\)</li> <li>Function of the current state and next state</li> </ul> </li> <li>Next State Equation(Characteristic equation)<ul> <li>\\(A(t+1) = D_A\\)</li> <li>A function of inputs and the current state</li> </ul> </li> </ul> </li> <li> <p>Latch</p> <ul> <li>Property<ul> <li>Store a bit, able to change and keep</li> <li>Too fast fallback and state change for a sequential circuit (transparent)</li> </ul> </li> <li>\\(S-R\\) Latch<ul> <li>NOR gates</li> <li>\\(R---Q\\) \\(S---\\overline{Q}\\)</li> <li>\\(S = 1, R = 0,Q = 1\\) : Set</li> <li>\\(S = 0, R = 1,Q = 0\\) : Reset</li> </ul> </li> <li>\\(\\overline{S}-\\overline{R}\\) Latch<ul> <li>NAND gates</li> <li>\\(\\overline{S}---Q\\) \\(\\overline{R}---\\overline{Q}\\)</li> <li>\\(S = 1(\\overline{S}=0), R = 0,Q=1\\) : Set</li> <li>\\(S = 0, R = 1,Q=0\\) : Reset</li> </ul> </li> <li>Clocked \\(S-R\\) Latch (\\(S-R\\) Latch with Control Input)<ul> <li>Add a control input to control the \\(\\overline{S}-\\overline{R}\\) latch</li> <li>\\(\\overline{S}\\) = S NAND C</li> </ul> </li> <li>Both Latches S=1,Q=1</li> <li>D Latch<ul> <li>Based on \\(\\overline{S}-\\overline{R}\\) Latch with Control Input</li> <li>Let \\(S = D, R = \\overline{D}\\) to avoid the forbidden state</li> <li>Q = D</li> </ul> </li> </ul> </li> <li> <p>Flip-Flop</p> <ul> <li> <p>Master - Slave FF</p> <ul> <li>Pulse - Triggered</li> <li>S-R MS FF<ul> <li>Master : Clocked S-R Latch</li> <li>Slave : Clocked S-R Latch</li> <li>Control Input : \\(C\\) &amp; \\(\\overline{C}\\)</li> <li>Every clock cycle only change once (half for master, half for slave)</li> <li>1's catching problem : glitch</li> </ul> </li> <li>J-K MS FF<ul> <li>Same as S-R MS FF, but with J-K Latch</li> <li>1 - 1 state permitted, flip to the opposite state</li> </ul> </li> <li>Edge - Triggered</li> <li>D MS FF<ul> <li>Master : D Latch</li> <li>Slave : Clocked S-R Latch</li> <li>Control Input : \\(C\\) &amp; \\(\\overline{C}\\)</li> <li>Since D Latch has no keeping state when clocked, no 1's catching problem</li> <li>Positive/Negative - level triggered flip-flop : associated with the output slave</li> <li>*Direct inputs : often for initial set</li> </ul> </li> <li>T Flip-Flop<ul> <li>J-K MS FF with J = K</li> <li>\\(T = 1\\) : Toggle</li> <li>\\(T = 0\\) : Keep</li> <li>*Edge-Triggered D Flip-Flop</li> </ul> </li> </ul> </li> <li> <p>Timing parameters</p> <ul> <li>Setup Time \\(t_s\\)<ul> <li>Time before clock edge that data must be stable</li> <li>*For Edge-trigger it's short, for Pulse-trigger it keep for whole pulse</li> </ul> </li> <li>Hold Time \\(t_h\\)<ul> <li>Time after clock edge that data must be stable</li> </ul> </li> <li>Propagation Delay \\(t_{pd}\\)<ul> <li>Time from input change to output change</li> </ul> </li> <li>\\(t_h\\) in \\(t_{pd}\\) and often \\(t_h &lt; t_{pd}\\), thus often ignore \\(t_h\\) in analysis</li> <li>Clock cycle time &gt; longest propagation delay from one clock edge to another edge</li> </ul> </li> </ul> </li> </ul>"},{"location":"DigitLogic/#hardware-implementation","title":"Hardware Implementation","text":"<ul> <li> <p>*CMOS</p> <ul> <li>NMOS - GND, PMOS - VCC</li> <li>NMOS &amp; PMOS in series(complesmentary &amp; dual)</li> </ul> </li> <li> <p>Register</p> </li> </ul> <p>A set of flip-flops, possibly with added combinational gates, that perform data-processing tasks. The flip-flops hold data, and the gates determine the new or transformed data to be transferred into the flip-flops</p> <ul> <li> <p>Structure</p> <ul> <li>Clock<ul> <li>Sequential control</li> </ul> </li> <li>Flip-Flops<ul> <li>Storage</li> </ul> </li> <li>Data Path (micro-operation)<ul> <li>Processing data</li> <li>Transfer data</li> </ul> </li> <li>Control Unit<ul> <li>Control the data path</li> </ul> </li> </ul> </li> <li> <p>Load</p> <ul> <li>Parallel Load</li> </ul> <p>Load all bits at the same time (clock cycle) </p> <ul> <li>Clock gating<ul> <li>\\(C = \\overline{Load} + Clock\\)</li> <li>Clock skew problem, hard to implement</li> </ul> </li> <li>Load enable<ul> <li>\\(D = Load \\cdot D + \\overline{Load} \\cdot Q\\)</li> <li>Actually a MUX</li> </ul> </li> <li>Serial Load</li> </ul> <p>Load one bit at a time (clock cycle) </p> <ul> <li>Useful in data transmission</li> </ul> </li> <li> <p>Transfer</p> <p>Condition: DR[...] &lt;- SR[Address] </p> <ul> <li>Multiplexer and Bus -Based Transfers</li> <li>For single register (too expensive)<ul> <li>\\(Load = K_1 + K_2 + ... +K_n\\)</li> <li>\\(D = MUX(Input,K)\\)</li> </ul> </li> <li>For multiple registers<ul> <li>Bus : a set of multiplexer outputs shared as a common path (single source problem)</li> <li>Three-state gates : bidirectional input\u2013output lines</li> </ul> </li> </ul> </li> <li> <p>Processing</p> <ul> <li>ALU<ul> <li>Arithmetic micro-operations</li> <li>Logic micro-operations</li> </ul> </li> <li> <p>Shift micro-operations</p> <ul> <li> <p>Serial shift</p> <ul> <li>Serial link the flip-flops</li> <li>With a proper clock difference, SO can get the serial result</li> <li>For N bits:<ul> <li>Starts with N - K clcok cycles, get SI &lt;&lt; K</li> <li>Start with N + K clock cycles, get SI &gt;&gt; K</li> </ul> </li> </ul> </li> <li> <p>Parallel shift</p> <ul> <li>Parallel output</li> <li>Just add an output for each flip-flop</li> <li>Parallel load</li> <li>Use combinational logic to control the load (MUX)</li> <li>\\(Shift:Q \\leftarrow shift (Q)\\) \\(\\overline{Shift} \\cdot Load: Q \\leftarrow D\\) \\(\\overline{Shift} \\cdot \\overline{Load}: Q \\leftarrow Q\\)</li> </ul> </li> <li> <p>Bidirectional shift</p> <ul> <li>Add a control signal to control the direction of shift</li> <li>\\(\\overline{S_1} S_0: D \\leftarrow SL(Q)\\) \\(S_1 \\overline{S_0}: D \\leftarrow SR(Q)\\) \\(S_1 S_0: D \\leftarrow Input\\) \\(\\overline{S_1} \\overline{S_0}: D \\leftarrow Q\\)</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Counter</p> <ul> <li> <p>Ripple counter</p> <ul> <li>\\(C_{i+1} = \\overline{Q_i}(add)/Q_i(dec)\\) \\(D_i = \\overline{Q_i}\\)</li> <li>Consider every time Q flips, the next flip-flop will be triggered</li> </ul> </li> <li> <p>Serial counter</p> <ul> <li>Same clock</li> <li>Control the D input of each flip-flop, but D relies on the previous flip-flop</li> </ul> </li> <li> <p>Parallel counter</p> <ul> <li>Update all in a single clock cycle</li> <li>More efficient than serial counter</li> </ul> </li> <li> <p>Other counter</p> <ul> <li>Modulo-N counter</li> <li>BCD counter</li> </ul> </li> </ul> </li> <li> <p>Memory</p> </li> <li> <p>Some terminology</p> <ul> <li>Word<ul> <li>A groups of bits that are accessed together</li> </ul> </li> <li>Width (Memory width)<ul> <li>The number of bits in a word</li> </ul> </li> <li>Depth (Address width)<ul> <li>The number of words in a memory</li> </ul> </li> <li>Memory size = Width * Depth</li> <li>Memory data path width<ul> <li>The number of bits that can be transferred in a bus</li> </ul> </li> <li>Latency time<ul> <li>From application of row address until first word available</li> </ul> </li> <li>Burst size<ul> <li>The number of words/bits transferred in a burst</li> </ul> </li> <li>Memory bandwidth<ul> <li>Speed of data transfer</li> <li>Bandwidth = Burst size / (Latency time + Burst Size * Cycle time)   (Busrt size plus 2 if it's DDR)</li> </ul> </li> </ul> </li> <li> <p>Read / Write</p> <ul> <li>CS (Chip Select)<ul> <li>Enable the memory</li> </ul> </li> <li>Address line<ul> <li>Select the word</li> </ul> </li> <li>Data line<ul> <li>Read / Write the data</li> </ul> </li> <li>Access time<ul> <li>Time from address to output data</li> </ul> </li> <li>Write cycle time<ul> <li>Time between successive writes</li> </ul> </li> </ul> </li> <li> <p>Special Technicals</p> <ul> <li>bidirectional pins for data line<ul> <li>Use three-state gates</li> </ul> </li> <li>Coincidence selection<ul> <li>2D array : Access by row address and column address</li> <li>Often the address line is used for both row select and column select, not row line and column line</li> </ul> </li> </ul> </li> <li> <p>Extension</p> <ul> <li>Word extension<ul> <li>Just parallel the data line</li> </ul> </li> <li>Depth extension<ul> <li>Use a decoder with CS to choose the memory</li> </ul> </li> </ul> </li> <li> <p>SRAM</p> <p>Static Random Access Memory </p> <ul> <li>Structure<ul> <li>Storage on S-R Latch</li> <li>Dual input &amp; output</li> </ul> </li> <li>Volatile</li> <li>Expensive</li> </ul> </li> <li> <p>DRAM</p> <p>Dynamic Random Access Memory </p> <ul> <li>Structure<ul> <li>Storage on capacitor</li> <li>Single input &amp; output</li> </ul> </li> <li>Cheap</li> <li>Dense</li> <li>Read / Write<ul> <li>Row address \\(\\rightarrow\\) Column address \\(\\rightarrow\\) \\(\\rightarrow\\) I/O activated \\(\\rightarrow\\) Data valid \\(\\rightarrow\\) Refresh</li> </ul> </li> <li> <p>Refresh</p> <ul> <li>Recharge the capacitor</li> <li>Control by \\(\\overline{RAS}\\) &amp; \\(\\overline{CAS}\\) of outside devices (0 triggered)</li> <li>Methods<ul> <li>RAS-only refresh<ul> <li>Refresh the whole row</li> <li>The row address is controlled by IC</li> <li>\\(RAS =0,CAS =1\\)</li> </ul> </li> <li>CAS-before-RAS refresh<ul> <li>Controlled by inner counter</li> <li>\\(CAS =0 \\rightarrow RAS = 0\\)</li> </ul> </li> <li>Hidden refresh<ul> <li>CAS-before-RAS refresh following a normal read / write</li> </ul> </li> </ul> </li> <li>Mode<ul> <li>Burst mode<ul> <li>stop the work and refresh all memory for a while</li> </ul> </li> <li>Distributed refresh<ul> <li>Refresh the memory in a distributed way</li> <li>space out refresh one row at a time, thus avoid blocking memory for a long time</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>SDRAM</p> </li> </ul> <p>Synchronous DRAM </p> <ul> <li>Burst length<ul> <li>Number of words accessed in a single access (burst read)</li> </ul> </li> </ul> </li> <li> <p>DDR SDRAM</p> <p>Double Data Rate SDRAM </p> <ul> <li>Transfer data on both rising and falling edges of the clock</li> </ul> </li> <li> <p>*RDRAM</p> <p>Rambus DRAM </p> </li> </ul>"},{"location":"DigitLogic/#labs","title":"Labs","text":"<ul> <li> <p>74LS138</p> <ul> <li>3-8 decoder</li> <li>3 inputs, 8 outputs (negative one-hot logic)</li> <li>3 enable inputs \\(G,\\overline{G2A},\\overline{G2B}\\)</li> </ul> </li> <li> <p>MC14495</p> <ul> <li>4 bit Hex - 7 segment decoder</li> <li>negative logic</li> <li>a - f clockwise, g in the middle, p is point</li> </ul> </li> </ul>"},{"location":"DigitLogic/#verilog","title":"Verilog","text":"<ul> <li> <p>\u95e8\u7ea7</p> <ul> <li>or,and,not,nand,nor,xor,xnor(output,input1,input2) </li> </ul> </li> <li> <p>RTL</p> <ul> <li>assign  </li> </ul> </li> <li> <p>\u884c\u4e3a\u7ea7</p> <ul> <li>always @(*) </li> </ul> </li> </ul>"},{"location":"Git/","title":"Git","text":"<p>\u65ad\u65ad\u7eed\u7eed\u5730\u4f7f\u7528\u4e86git\u7684\u90e8\u5206\u529f\u80fd\uff0c\u7a0d\u7a0d\u505a\u4e00\u4e9b\u7cfb\u7edf\u6027\u7684\u6574\u7406</p>"},{"location":"Git/#_1","title":"\u7406\u89e3","text":"<p>git \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u5373\u6bcf\u4e2a\u4eba\u7684\u672c\u5730\u90fd\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7248\u672c\u5e93\uff0c\u53ef\u4ee5\u8fdb\u884c\u7248\u672c\u63a7\u5236\u3002</p> <p>\u800c\u4e14git\u7684\u7248\u672c\u5e93\u8bb0\u5f55\u7684\u4e0d\u662f\u6bcf\u4e2a\u6587\u4ef6\u7684\u589e\u91cf\uff0c\u800c\u662f\u6240\u6709\u6587\u4ef6\u7684\u5feb\u7167\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fdb\u884c\u7248\u672c\u56de\u9000\u3002</p> <p>\u5e38\u7528git\u4e00\u822c\u662f\u901a\u8fc7\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u6765\u8fdb\u884c\u534f\u4f5c\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u514b\u9686\u4e00\u4efd\u5230\u672c\u5730\uff0c\u7136\u540e\u5728\u81ea\u5df1\u7684\u5206\u652f\u4e0a\u8fdb\u884c\u4fee\u6539\uff0c\u6700\u540e\u518d\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u901a\u8fc7\u51b2\u7a81\u5904\u7406\u5408\u5e76\u5230\u4e3b\u5206\u652f\u3002\uff08~~\u6216\u8005\u5f53\u6210\u8fdc\u7a0b\u5907\u4efd\u5e93~~\uff09</p>"},{"location":"Git/#git_1","title":"git\u67b6\u6784","text":"<ul> <li>workspace\uff1a\u5de5\u4f5c\u533a\uff0c\u5b9e\u9645\u5de5\u4f5c\u76ee\u5f55</li> <li>index\uff1a\u6682\u5b58\u533a\uff0c\u901a\u8fc7add\u6dfb\u52a0</li> <li>repository\uff1a\u7248\u672c\u5e93</li> <li>remote\uff1a\u8fdc\u7a0b\u4ed3\u5e93</li> <li>branch\uff1a\u5206\u652f</li> <li>HEAD\uff1a\u6307\u5411\u5f53\u524d\u5206\u652f\u7684\u6307\u9488</li> <li>origin\uff1a\u9ed8\u8ba4\u8fdc\u7a0b\u4ed3\u5e93</li> <li>master: \u9ed8\u8ba4\u4e3b\u5206\u652f</li> </ul>"},{"location":"Git/#_2","title":"\u5e38\u7528\u547d\u4ee4","text":"<ul> <li> <p>git pull &lt;remote&gt; &lt;branch&gt;</p> <p>\u7ea6\u7b49\u4e8e git clone + git merge,\u4e00\u822c\u7528\u4e8e\u5c06\u8fdc\u7a0b\u4ed3\u5e93\u514b\u9686\u5230\u672c\u5730</p> </li> <li> <p>git push (-u) &lt;remote&gt; &lt;branch&gt;</p> <p>\u5c06\u672c\u5730\u7684\u4ed3\u5e93\uff08repository\uff09\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5206\u652f\u4e0a\uff0c-u\u53c2\u6570\u8868\u793a\u5c06\u672c\u5730\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u5173\u8054\u8d77\u6765</p> </li> <li> <p>git add &lt;file&gt;</p> <p>\u5c06\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff08index\uff09</p> </li> <li> <p>git commit -m &lt;message&gt;</p> <p>\u5c06\u6682\u5b58\u533a\u7684\u6587\u4ef6\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\uff08repository\uff09 message\u662f\u63d0\u4ea4\u7684\u8bf4\u660e\uff0c\u4e00\u822c\u662f\u5bf9\u672c\u6b21\u63d0\u4ea4\u7684\u7cbe\u7b80\u63cf\u8ff0</p> </li> <li> <p>git init</p> <p>\u521d\u59cb\u5316\u4e00\u4e2a\u672c\u5730\u4ed3\u5e93</p> </li> <li> <p>git clone</p> <p>\u5c06\u8fdc\u7a0b\u4ed3\u5e93\u514b\u9686\u5230\u672c\u5730</p> </li> <li> <p>git branch</p> <p>\u67e5\u770b\u5206\u652f -a \u67e5\u770b\u6240\u6709\u5206\u652f -r \u67e5\u770b\u8fdc\u7a0b\u5206\u652f -d \u5220\u9664\u5206\u652f \u540e\u52a0\u5206\u652f\u540d\u53ef\u65b0\u5efa\u5206\u652f</p> </li> <li> <p>git checkout &lt;branch&gt;</p> <p>\uff08\u65b0\u5efa\u4e14\uff09\u5207\u6362\u5206\u652f</p> </li> <li> <p>git merge &lt;branch&gt;</p> <p>\u5c06&lt;branch&gt;\u5206\u652f\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f</p> </li> <li> <p>git rebase</p> <p>\u5c06\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\u79fb\u52a8\u5230&lt;branch&gt;\u5206\u652f\u7684\u6700\u540e \u4f7f\u5f97\u63d0\u4ea4\u8bb0\u5f55\u66f4\u52a0\u6e05\u6670</p> </li> <li> <p>git log (--oneline)</p> <p>\u67e5\u770b\u63d0\u4ea4\u8bb0\u5f55</p> </li> </ul>"},{"location":"Git/#_3","title":"\u5e38\u7528\u64cd\u4f5c","text":"<ul> <li>\u65b0\u5efa\u4e00\u4e2a\u672c\u5730\u4ed3\u5e93\u5e76\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\u5173\u8054</li> </ul> <pre><code>git init\ngit remote add origin &lt;url&gt;\ngit pull origin master\n...\ngit add *\ngit commit -m \"...\"\ngit push -u origin master\n</code></pre> <ul> <li>\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u514b\u9686\u5230\u672c\u5730</li> </ul> <pre><code>git clone &lt;url&gt;\n</code></pre> <ul> <li>\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u62c9\u53d6\u5206\u652f\u5e76\u5b8c\u6210\u5408\u5e76</li> </ul> <pre><code>git pull origin &lt;branch\\&gt;\ngit merge &lt;branch\\&gt;\ngit add *\ngit commit -m \"...\"\ngit push -u origin master\ngit push --delete origin &lt;branch\\&gt; # \u5220\u9664\u8fdc\u7a0b\u5206\u652f\n</code></pre>"},{"location":"Info/","title":"\u4fe1\u606f\u7406\u8bba","text":""},{"location":"Info/#_2","title":"\u4fe1\u606f\u7684\u5b9a\u4e49","text":"<ul> <li> <p>\u4fe1\u606f\u662f\u4e00\u79cd\u7528\u6765\u6d88\u9664\u4e0d\u786e\u5b9a\u6027\u7684\u4e1c\u897f</p> </li> <li> <p>\u4fe1\u606f\u6765\u6e90\u4e8e\u7269\u8d28\uff0c\u4f46\u4e0d\u7b49\u4e8e\u7269\u8d28</p> </li> <li> <p>\u4fe1\u606f\u5fc5\u987b\u6709\u4e00\u4e2a\u8f7d\u4f53\uff0c\u4fe1\u606f\u662f\u8f7d\u4f53\u7684\u5185\u5bb9</p> </li> </ul>"},{"location":"Info/#_3","title":"\u4fe1\u606f\u7684\u5ea6\u91cf","text":"<p>\\(I(A) = -\\log_2 P(A)\\)</p> <ul> <li> <p>\u4fe1\u606f\u7684\u5ea6\u91cf\u5355\u4f4d\u662f\u6bd4\u7279\uff08bit\uff09\uff0c\u6b63\u5bf9\u5e94\u4e8e\u5f53\u524d\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf</p> </li> <li> <p>\u9999\u519c\u4fe1\u606f\u91cf\u76f8\u5f53\u4e8e\u5c06\u4fe1\u606f\u8bba\u548c\u6982\u7387\u8bba\u8054\u7cfb\u8d77\u6765\u3001</p> <ul> <li> <p>\u6982\u7387\u8d8a\u5c0f\uff0c\u4fe1\u606f\u91cf\u8d8a\u5927</p> </li> <li> <p>\u975e\u8d1f\u6570</p> </li> <li> <p>\u53ef\u52a0\u6027</p> </li> </ul> </li> </ul>"},{"location":"Info/#_4","title":"\u4fe1\u606f\u8bba &amp; \u901a\u4fe1","text":"<ul> <li> <p>\u4fe1\u6e90\u7f16\u7801</p> <ul> <li>\u4e00\u5b9a\u635f\u5931\u6bd4\u7387\u4e0b\uff0c\u901a\u8fc7\u7f16\u7801\u6280\u672f\u51cf\u5c11\u4fe1\u606f\u7684\u4f20\u8f93\u91cf</li> </ul> </li> <li> <p>\u4fe1\u9053\u63a5\u6536</p> <ul> <li>\u6297\u5e72\u6270\u4fe1\u53f7\uff0c\u63d0\u9ad8\u4fe1\u606f\u4f20\u8f93\u7684\u53ef\u9760\u6027</li> </ul> </li> <li> <p>\u7406\u8bba\u6781\u9650</p> </li> </ul>"},{"location":"Make/","title":"Makefile &amp; CMake","text":"<p>\u4eba\u59cb\u7ec8\u8fd8\u662f\u60f0\u6027\u52a8\u7269\uff0c\u867d\u7136\u5bd2\u5047\u91cc\u5df2\u7ecf\u5f3a\u8feb\u81ea\u5df1\u5b66\u4e86\u4e00\u4e9b\u57fa\u672c\u7684<code>Makefile</code>\uff0c\u4f46\u662f\u5f53\u771f\u7684\u9762\u5bf9\u4e00\u4e2aproject\u8fdb\u884c\u5e94\u7528\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u4e3e\u6b65\u7ef4\u8270\u3002\u56e0\u6b64\u5c31\u501f\u7740OOP Lab1\u7684push, \u91cd\u65b0\u6574\u7406\u4e00\u4e0b\u5bf9\u4e8e<code>Makefile</code>\u7684\u7406\u89e3\u3002</p> <p>\u81f3\u4e8e<code>CMake</code>\uff0c\u7b49\u5c06\u6700\u8fd1\u4e13\u4e1a\u8bfe\u7684\u592a\u591a\u4f5c\u4e1a\u5904\u7406\u4e00\u4e0b\u518d\u6574\u7406\u3002 </p>"},{"location":"Make/#compile-link-c","title":"Compile &amp; Link (C++)","text":"<p>\u9996\u5148\u6574\u7406\u4e00\u4e0b\u4ee3\u7801\u6e90\u6587\u4ef6\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8fc7\u7a0b\uff1a</p> <ul> <li> <p>Preprocessing\uff1a\u9884\u5904\u7406\uff0c\u5c06<code>#include</code>\u7684\u5934\u6587\u4ef6\u6240\u6307\u5f15\u7684\u6e90\u6587\u4ef6\u63d2\u5165\u5230\u5bf9\u5e94\u6587\u4ef6\u4e2d\uff0c\u8fdb\u884c\u5b8f\u5b9a\u4e49\u7684\u66ff\u6362\uff0c\u5e76\u5220\u9664\u6ce8\u91ca\uff0c\u751f\u6210\u4e34\u65f6\u6587\u4ef6<code>*.i</code>\u3002</p> </li> <li> <p>Compilation\uff1a\u7f16\u8bd1\uff0c\u5c06\u9884\u5904\u7406\u540e\u7684\u6587\u4ef6\u8f6c\u6362\u4e3a\u6c47\u7f16\u4ee3\u7801<code>*.s</code>\u3002</p> <ul> <li><code>g++ -S *.cpp</code> </li> </ul> </li> <li> <p>Assembly\uff1a\u6c47\u7f16\uff0c\u5c06\u6c47\u7f16\u4ee3\u7801\u8f6c\u6362\u4e3a\u76ee\u6807\u6587\u4ef6<code>*.o</code>\u3002</p> <ul> <li> <p><code>g++ -c *.s</code> </p> </li> <li> <p><code>g++ -c *.cpp</code> </p> </li> </ul> </li> <li> <p>Linking\uff1a\u94fe\u63a5\uff0c\u5c06\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <ul> <li><code>g++ -o *(.exe) *.o</code> </li> </ul> </li> <li> <p>PS: -o \u9009\u9879\u53ea\u662f\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u540d\uff0c\u5e76\u6ca1\u6709\u5176\u4ed6\u7279\u6b8a\u7684\u610f\u4e49\uff0c\u56e0\u6b64\u524d\u9762\u51e0\u6761\u547d\u4ee4\u4e5f\u53ef\u4ee5\u4f7f\u7528-o\u9009\u9879\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u540d\u3002 </p> </li> </ul>"},{"location":"Make/#multiple-files-c","title":"Multiple Files (C++)","text":"<ul> <li> <p>*.h</p> <ul> <li> <p>\u53ea\u662f\u4f5c\u4e3a\u8be5\u529f\u80fd\u6a21\u5757\u7684\u63a5\u53e3\uff0c\u4e00\u822c\u4e0d\u5305\u542b\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u901a\u8fc7<code>#include</code>\u6307\u5f15\u5230\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4e2d\u3002</p> </li> <li> <p>\u5f88\u591a\u65f6\u5019\u611f\u89c9\u7531\u4e8e\u7ffb\u8bd1\u95ee\u9898\uff0c\u201d\u5b9a\u4e49\u201c\u3001\u201d\u58f0\u660e\u201c\u3001\u201d\u5b9e\u73b0\u201c\u4e4b\u7c7b\u7684\u611f\u89c9\u5b8c\u5168\u5206\u4e0d\u6e05\uff0c\u4f46\u662f\u4e00\u822c\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u5728\u5934\u6587\u4ef6\u4e2d\u4e0d\u80fd\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4\u5373\u53ef\u3002</p> </li> <li> <p>\u4e3b\u8981\u5185\u5bb9\uff1a</p> <ul> <li> <p>\u5934\u6587\u4ef6\u4fdd\u62a4 <code>#ifndef</code> <code>#define</code> <code>#endif</code></p> </li> <li> <p>\u7ed3\u6784\u4f53\u3001\u7c7b\u7684\u58f0\u660e\uff08\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4f3c\u4e4e\u9700\u8981\u76f4\u63a5\u5b9e\u73b0\uff0c\u5176\u4ed6\u5185\u90e8\u51fd\u6570\u53ea\u9700\u8981\u58f0\u660e\uff09</p> </li> <li> <p>\u51fd\u6570\u7684\u58f0\u660e</p> </li> <li> <p>\u5b8f\u5b9a\u4e49</p> </li> <li> <p>\u5168\u5c40\u91cf\u7684\u58f0\u660e <code>extern</code> \uff08\u4e0d\u53ef\u8d4b\u503c\uff0c\u5426\u5219\u5c31\u9700\u8981\u5360\u7528\u5185\u5b58\u7a7a\u95f4\u4e86\uff09      </p> </li> </ul> </li> </ul> </li> <li> <p>*.cpp\uff08\u529f\u80fd\u6a21\u5757\u6e90\u6587\u4ef6\uff09</p> <ul> <li> <p>\u5bf9\u5934\u6587\u4ef6\u58f0\u660e\u7684\u90e8\u5206\u8fdb\u884c\u5177\u4f53\u5b9e\u73b0</p> </li> <li> <p>\u4e3b\u8981\u5185\u5bb9\uff1a</p> <ul> <li> <p>\u5934\u6587\u4ef6\u5f15\u7528</p> <ul> <li> <p>\u4e0a\u8ff0\u540c\u540d\u5934\u6587\u4ef6</p> </li> <li> <p>\u5176\u4ed6\u9700\u8981\u7684\u5934\u6587\u4ef6\uff0c\u8fd9\u6837\u53ef\u4ee5\u7531\u8be5\u6a21\u5757\u76f4\u63a5\u751f\u6210\u5bf9\u5e94\u7684OBJ\u76ee\u6807\u6587\u4ef6\uff0c\u65b9\u4fbf\u6574\u4e2a\u5de5\u7a0b\u540e\u7eed\u7684\u94fe\u63a5\u3002</p> </li> </ul> </li> <li> <p>\u7ed3\u6784\u4f53\u3001\u7c7b\u7684\u5b9e\u73b0\uff0c\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u58f0\u660e\u90e8\u5206\uff0c\u9700\u8981\u7528<code>name::</code>\u6307\u5b9a </p> </li> <li> <p>\u51fd\u6570\u7684\u5b9e\u73b0</p> </li> <li> <p>\u5168\u5c40\u91cf\u7684\u5b9a\u4e49\uff08\u8d4b\u503c\uff09</p> </li> </ul> </li> </ul> </li> <li> <p>Main.cpp </p> <ul> <li> <p>\u4e3b\u51fd\u6570\uff0c\u8c03\u7528\u5176\u4ed6\u6a21\u5757\u7684\u51fd\u6570\uff0c\u5b9e\u73b0\u6574\u4e2a\u7a0b\u5e8f\u7684\u529f\u80fd\u3002</p> </li> <li> <p>\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u5f15\u7528\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\uff0c\u7136\u540e\u8c03\u7528\u5bf9\u5e94\u7684\u51fd\u6570\u5373\u53ef\u3002  </p> </li> </ul> </li> </ul>"},{"location":"Make/#makefile","title":"Makefile","text":"<p>Make loves c compilation. And every time it expresses its love, things get confusing.</p> <ul> <li> <p>Tutorial \uff08\u901a\u8fc7\u5927\u91cf\u4e3e\u4f8b\uff0c\u975e\u5e38\u901a\u4fd7\u6613\u61c2\u4e14\u5f62\u8c61</p> </li> <li> <p>Docs \uff08\u5b98\u65b9\u6587\u6863\uff0c\u8be6\u7ec6\u5168\u9762\uff0c\u4f46\u662f\u6709\u70b9\u67af\u71e5\uff09</p> </li> <li> <p>Makefile \u6211\u7684\u7406\u89e3\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u7f16\u8bd1\u7684\u811a\u672c\uff0c\u901a\u8fc7\u6307\u5b9a\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u548c\u547d\u4ee4\uff0c\u6765\u5b9e\u73b0\u5bf9\u4e8e\u6e90\u6587\u4ef6\u7684\u7f16\u8bd1\u3001\u94fe\u63a5\u7b49\u64cd\u4f5c\u3002\u4e0b\u9762\u6211\u5c31\u7b80\u5355\u6574\u7406\u4e86\u4e00\u4e0b\u81ea\u5df1\u8ba4\u4e3a\u6bd4\u8f83\u91cd\u8981\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u4e9b\u70b9\u3002</p> </li> </ul>"},{"location":"Make/#varible","title":"Varible","text":"<ul> <li> <p>\u5e38\u7528\u5168\u90e8\u5927\u5199\uff0c\u7528<code>(:)=</code>\u8d4b\u503c</p> <ul> <li><code>:=</code> \u4f1a\u7acb\u5373\u5c55\u5f00\uff0c\u800c<code>=</code>\u5219\u662f\u5728\u4f7f\u7528\u65f6\u624d\u5c55\u5f00 (\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u9012\u5f52\u5b9a\u4e49)</li> </ul> </li> <li> <p><code>+=</code> \u8ffd\u52a0\u8d4b\u503c</p> </li> <li> <p>\u7528\u7528<code>$()</code>\u5f15\u7528</p> </li> </ul>"},{"location":"Make/#sign","title":"Sign","text":"<ul> <li> <p>\u7279\u6b8a\u53d8\u91cf</p> <ul> <li> <p><code>$@</code> \u76ee\u6807\u6587\u4ef6</p> </li> <li> <p><code>$^</code> \u6240\u6709\u7684\u4f9d\u8d56\u6587\u4ef6</p> </li> <li> <p><code>$&lt;</code> \u7b2c\u4e00\u4e2a\u4f9d\u8d56\u6587\u4ef6</p> </li> <li> <p><code>$?</code> \u6240\u6709\u6bd4\u76ee\u6807\u6587\u4ef6\u65b0\u7684\u4f9d\u8d56\u6587\u4ef6</p> </li> <li> <p><code>$*</code> \u65e0\u540e\u7f00\u7684\u76ee\u6807\u6587\u4ef6\u540d</p> </li> </ul> </li> <li> <p>\u901a\u914d\u7b26</p> <ul> <li> <p><code>*</code> \u5339\u914d\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32</p> </li> <li> <p><code>?</code> \u5339\u914d\u5355\u4e2a\u5b57\u7b26</p> </li> <li> <p><code>%</code> \u5339\u914d\u4efb\u610f\u6709\u957f\u5ea6\u7684\u5b57\u7b26\u4e32,\u5e76\u4e14\u5f80\u5f80\u5e94\u7528\u5728Pattern Rule</p> </li> </ul> </li> </ul>"},{"location":"Make/#rule","title":"Rule","text":"<ul> <li> <p>Basic Rule</p> Makefile<pre><code>target: prerequisites\n    command\n</code></pre> <ul> <li> <p>Target\uff1a</p> <ul> <li> <p>\u76ee\u6807, \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6807\u53f7\uff0c\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u89c4\u5219\u7684\u540d\u5b57</p> </li> <li> <p>\u7279\u6b8a\u7684\uff0c'all'\u4e3a\u9ed8\u8ba4\u76ee\u6807\uff0c'clean'\u4e3a\u6e05\u7406\u76ee\u6807</p> </li> </ul> </li> <li> <p>Prerequisites\uff1a\u4f9d\u8d56\u6587\u4ef6\uff0c\u4f9d\u8d56\u6587\u4ef6\u53d8\u5316\u624d\u4f1a\u6267\u884c\u76f8\u5e94\u547d\u4ee4</p> </li> <li> <p>Command\uff1a\u547d\u4ee4 </p> </li> </ul> </li> <li> <p>Pattern Rule</p> Makefile<pre><code>%.o: %.c\n    $(CC) $(CFLAG) -c $&lt; -o $@\n</code></pre> <ul> <li> <p>%.o\uff1a\u901a\u914d\u7b26\uff0c\u8868\u793a\u6240\u6709\u7684.o\u6587\u4ef6</p> </li> <li> <p>%.c\uff1a\u901a\u914d\u7b26\uff0c\u8868\u793a\u6240\u6709\u7684.c\u6587\u4ef6</p> </li> <li> <p>\u8fd9\u91cc\u76f8\u5f53\u4e8e\u5c06\u76ee\u5f55\u4e2d\u6240\u6709\u7684.c\u6587\u4ef6\u7f16\u8bd1\u4e3a\u5bf9\u5e94\u7684.o\u6587\u4ef6\uff0c\u800c\u4e0d\u9700\u8981\u4e00\u4e2a\u4e2a\u6307\u5b9a</p> </li> <li> <p>\u867d\u7136\u770b\u8d77\u6765\u76f8\u5f53\u9ad8\u6548\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u6837\u6ca1\u6709\u89c4\u5219\u6807\u53f7\uff0c\u96be\u4ee5\u63a7\u5236\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5e76\u4e0d\u5e38\u7528</p> </li> </ul> </li> <li> <p>Static Pattern Rule</p> Makefile<pre><code>targets: target-pattern: prereq-patterns\n    command\n</code></pre> <ul> <li> <p>targets: \u8fd9\u91cc\u5f80\u5f80\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u8868\u793a\u4e00\u7cfb\u5217\u7684\u76ee\u6807\u6587\u4ef6</p> </li> <li> <p>target-pattern: \u4e00\u822c\u4f7f\u7528<code>%</code>\u901a\u914d\u7b26\u6765\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f</p> </li> <li> <p>prereq-patterns: \u540c\u4e0a\uff0c\u4e00\u822c\u4f7f\u7528<code>%</code>\u901a\u914d\u7b26\u6765\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f </p> </li> <li> <p>command: \u611f\u89c9\u975e\u5e38\u50cfVerilog\u4e2d\u7684generate\u8bed\u53e5\uff0c\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u6765\u751f\u6210\u76f8\u4f3c\u7684\u529f\u80fd\u6a21\u5757\uff08\u8be6\u89c1\u4e0b\u65b9\u4f8b\u5b50\uff09</p> </li> </ul> </li> <li> <p>Pattern Filter</p> <ul> <li> <p><code>$(filter pattern, text)</code>: \u4ecetext\u4e2d\u7b5b\u9009\u51fa\u7b26\u5408pattern\u7684\u90e8\u5206 </p> </li> <li> <p>\u53ef\u4ee5\u914d\u5408\u4e0a\u65b9\u7684Pattern Rule\u4f7f\u7528\uff0c\u66ff\u6362targets\u6765\u5b9e\u73b0\u66f4\u52a0\u7075\u6d3b\u7684\u529f\u80fd</p> </li> </ul> Makefile<pre><code># Ex 1: .o files depend on .c files. Though we don't actually make the .o file.\n$(filter %.o,$(obj_files)): %.o: %.c\necho \"target: $@ prereq: $&lt;\"\n\n# Ex 2: .result files depend on .raw files. Though we don't actually make the .result file.\n$(filter %.result,$(obj_files)): %.result: %.raw\necho \"target: $@ prereq: $&lt;\" \n</code></pre> </li> </ul>"},{"location":"Make/#function","title":"Function","text":"<ul> <li> <p><code>$(wildcard pattern)</code></p> <ul> <li>\u901a\u914d\u7b26\uff0c\u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u7b26\u5408pattern\u7684\u6587\u4ef6\u540d</li> </ul> </li> <li> <p><code>$(patsubst pattern, replacement, text)</code></p> <ul> <li>\u66ff\u6362\uff0c\u5c06text\u4e2d\u7b26\u5408pattern\u7684\u90e8\u5206\u66ff\u6362\u4e3areplacement</li> </ul> </li> <li> <p><code>$(addprefix prefix, names)</code></p> <ul> <li>\u6dfb\u52a0\u524d\u7f00\uff0c\u5c06names\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u6dfb\u52a0\u4e0aprefix</li> </ul> </li> <li> <p><code>$(addsuffix suffix, names)</code></p> <ul> <li>\u6dfb\u52a0\u540e\u7f00\uff0c\u5c06names\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u6dfb\u52a0\u4e0asuffix </li> </ul> </li> <li> <p><code>$(shell command)</code></p> <ul> <li>\u6267\u884c\u547d\u4ee4\uff0c\u5c06\u547d\u4ee4\u7684\u8f93\u51fa\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c</li> </ul> </li> </ul>"},{"location":"Make/#_1","title":"\u5176\u4ed6\u9ad8\u9636\u7528\u6cd5","text":"<ul> <li>~~\u8fd8\u6ca1\u5b66~~</li> </ul>"},{"location":"Make/#exampleoop-lab1","title":"Example(\u4ee5OOP Lab1\u4e3a\u4f8b)","text":"<ul> <li> <p>\u9879\u76ee\u7b80\u4ecb\uff1a</p> <ul> <li> <p>\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u672c\u7ba1\u7406\u7cfb\u7edf\uff0c\u8981\u6c42\u751f\u6210<code>pdadd</code>\u3001<code>pdlist</code>\u3001<code>pdremove</code>\u3001<code>pdshow</code> 4\u4e2a\u53ef\u6267\u884c\u6587\u4ef6</p> </li> <li> <p>\u7f16\u7a0b\u65f6\u521b\u5efa\u4e86\u4e00\u4e2afile\u7c7b\uff0c\u7528\u4e8e\u4e0e\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u4ea4\u4e92\uff0c\u56e0\u6b64\u56db\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u90fd\u9700\u8981\u5f15\u7528\u8be5\u7c7b\u7684\u5934\u6587\u4ef6 </p> </li> </ul> </li> <li> <p>\u3010\u6700\u7b80\u5355\u7c97\u66b4\u7248\u3011</p> </li> </ul> Makefile<pre><code>  CC = g++\n  CFLAG = -std=c++11\n  SRC = .\n  OD = ..\n  FILE_ASSIST = $(SRC)/file.cpp\n\n  # \u76f4\u63a5\u4e24\u4e24\u6587\u4ef6\u4e00\u7ed1\uff0c\u7136\u540e\u76f4\u63a5\u7f16\u8bd1\n  $(OD)/pdadd: $(SRC)/pdadd.cpp $(FILE_ASSIST)\n      $(CC) $(CFLAG) $^ -o $(OD)/pdadd\n\n  $(OD)/pdlist: $(SRC)/pdlist.cpp $(FILE_ASSIST)\n      $(CC) $(CFLAG) $^ -o $(OD)/pdlist\n\n  $(OD)/pdshow: $(SRC)/pdshow.cpp $(FILE_ASSIST)\n      $(CC) $(CFLAG) $^ -o $(OD)/pdshow\n\n  $(OD)/pdremove: $(SRC)/pdremove.cpp $(FILE_ASSIST)\n      $(CC) $(CFLAG) $^ -o $(OD)/pdremove\n\n  clean:\n      rm -f $(OD)/pdadd $(OD)/pdlist $(OD)/pdremove $(OD)/pdshow\n      rm -f $(SRC)/*.o \n</code></pre> <ul> <li>\u3010\u6b63\u5e38\u7f16\u8bd1\u7a0b\u5e8f\u7248\u3011</li> </ul> Makefile<pre><code>  CC = g++\n  CFLAG = -std=c++11\n  SRC = .\n  OD = ..\n  OBJ = $(SRC)/file.o         #   object files of file assist\n  ADDOBJ = $(SRC)/pdadd.o     #   object file for pdadd\n  LISTOBJ = $(SRC)/pdlist.o       #   object file for pdlist\n  REMOVEOBJ = $(SRC)/pdremove.o   #   object file for pdremove\n  SHOWOBJ = $(SRC)/pdshow.o       #   object file for pdshow\n\n  all: $(OD)/pdadd $(OD)/pdlist $(OD)/pdremove $(OD)/pdshow\n\n  # \u901a\u8fc7.o\u6587\u4ef6\u94fe\u63a5\u5f97\u5230\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u907f\u514d\u4e86\u91cd\u590d\u7f16\u8bd1\n  $(OD)/pdadd: $(ADDOBJ) $(OBJ)\n      $(CC) $(CFLAG) -o $(OD)/pdadd $(ADDOBJ) $(OBJ)\n\n  $(OD)/pdlist: $(LISTOBJ) $(OBJ)\n      $(CC) $(CFLAG) -o $(OD)/pdlist $(LISTOBJ) $(OBJ)\n\n  $(OD)/pdremove: $(REMOVEOBJ) $(OBJ)\n      $(CC) $(CFLAG) -o $(OD)/pdremove $(REMOVEOBJ) $(OBJ)\n\n  $(OD)/pdshow: $(SHOWOBJ) $(OBJ)\n      $(CC) $(CFLAG) -o $(OD)/pdshow $(SHOWOBJ) $(OBJ)    \n\n  # \u901a\u8fc7\u4ece.cpp\u6587\u4ef6\u7f16\u8bd1\u5f97\u5230.o\u6587\u4ef6\n  .cpp.o:\n      $(CC) $(CFLAG) -c $&lt; -o $@\n\n  clean:\n      rm -f $(OBJ) $(ADDOBJ) $(LISTOBJ) $(REMOVEOBJ) $(SHOWOBJ) $(OD)/pdadd $(OD)/pdlist $(OD)/pdremove $(OD)/pdshow\n</code></pre> <ul> <li>\u3010\u9ad8\u6548\u7248\u3011</li> </ul> Makefile<pre><code>  CC = g++\n  CFLAG = -std=c++11\n  SRC = .\n  OD = ..\n  OBJ = $(SRC)/file.o         #   object files of file assist\n  TARGETS = pdadd pdlist pdremove pdshow\n  OBJS = $(addsuffix .o, $(TARGETS)) file.o\n\n  all: $(OBJS) $(TARGETS) \n\n  # \u901a\u8fc7static pattern rule\uff0c\u5927\u5927\u7b80\u5316\u4e86\u751f\u6210*.o \u548c *(.exe)\u7684\u8fc7\u7a0b\n  $(TARGETS): %: $(SRC)/%.o $(OBJ)\n      $(CC) $(CFLAG) -o $(OD)/$@ $^\n\n  $(OBJS): %.o: $(SRC)/%.cpp\n      $(CC) $(CFLAG) -c $&lt; -o $(SRC)/$@\n\n  clean:\n      cd $(SRC) &amp;&amp; rm -f $(OBJS)\n      cd $(OD) &amp;&amp; rm -f $(TARGETS)\n</code></pre>"},{"location":"OOP/","title":"OOP","text":""},{"location":"OOP/#buzzwords","title":"Buzzwords","text":"<ul> <li> <p>Encapsulation: \u5c01\u88c5</p> </li> <li> <p>Inheritance: \u7ee7\u627f</p> </li> <li> <p>Polymorphism: \u591a\u6001</p> </li> <li> <p>Overriding: \u8986\u76d6</p> </li> <li> <p>Interface: \u63a5\u53e3</p> </li> <li> <p>Cohesion: \u5167\u805a, \u4e00\u4e2a\u7c7b\u5185\u7684\u529f\u80fd\u9ad8\u5ea6\u76f8\u5173</p> </li> <li> <p>Coupling: \u8026\u5408\uff0c \u4e0d\u540c\u7c7b\u4e4b\u95f4\u7684\u5173\u8054\u7a0b\u5ea6</p> </li> <li> <p>Collection classes: \u5bb9\u5668</p> </li> <li> <p>Template: \u6a21\u677f</p> </li> <li> <p>Responsibility-driven design: \u8d23\u4efb\u9a71\u52a8\u8bbe\u8ba1</p> </li> </ul>"}]}